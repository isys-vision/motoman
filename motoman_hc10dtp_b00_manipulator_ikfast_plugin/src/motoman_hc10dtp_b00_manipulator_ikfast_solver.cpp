/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-08-17 21:27:25.134580
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[0]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.17)*x7);
x13=((0.162)*x7);
x14=((0.17)*x5);
x15=((0.5)*x7);
x16=((0.162)*x1);
x17=((1.0)*x5);
x18=((1.0)*x4);
x19=((1.0)*x2);
x20=((0.162)*x2);
x21=((1.0)*x7);
x22=((0.17)*x1);
x23=(x0*x3);
x24=(x3*x4);
x25=(x2*x6);
x26=(x1*x11);
x27=(x0*x6);
x28=(x3*x7);
x29=(x4*x6);
x30=(x2*x3);
x31=(x0*x1);
x32=(x1*x18);
x33=(x19*x3);
x34=(x0*x25);
x35=(x21*x27);
x36=(x18*x6*x7);
x37=(x25+x28);
x38=((((-1.0)*x35))+((x2*x23)));
x39=((((-1.0)*x36))+((x2*x24)));
x40=((((-1.0)*x19*x23))+x35);
x41=((((-1.0)*x18*x30))+x36);
x42=(x1*x38);
x43=(x1*x39);
x44=(x41*x5);
x45=((((-1.0)*x17*x4))+x42);
x46=(((x0*x5))+x43);
x47=(((x1*x10*x37))+((x11*(((((-1.0)*x21*x6))+x33)))));
x48=(((x10*x45))+((x11*(((((-1.0)*x21*x23))+(((-1.0)*x19*x27)))))));
IkReal x50=((1.0)*x18);
x49=(((x10*x46))+((x11*(((((-1.0)*x25*x50))+(((-1.0)*x28*x50)))))));
eerot[0]=(((x8*(((((-1.0)*x32))+((x40*x5))))))+((x48*x9)));
eerot[1]=(((x9*(((((-1.0)*x17*x40))+x32))))+((x48*x8)));
eerot[2]=(((x10*((((x23*x7))+x34))))+((x11*x45)));
IkReal x51=((1.0)*x4);
eetrans[0]=(((x10*((((x12*x23))+(((0.17)*x34))))))+(((-1.0)*x16*x51))+(((0.5)*x34))+((x5*((((x13*x27))+(((-1.0)*x20*x23))))))+(((0.7)*x23))+((x15*x23))+((x11*(((((-1.0)*x14*x51))+((x22*x38)))))));
eerot[3]=(((x8*((x31+x44))))+((x49*x9)));
eerot[4]=(((x9*(((((-1.0)*x31))+(((-1.0)*x17*x41))))))+((x49*x8)));
eerot[5]=(((x11*x46))+((x10*((((x25*x4))+((x24*x7)))))));
IkReal x52=(x25*x4);
eetrans[1]=(((x11*((((x0*x14))+((x22*x39))))))+((x0*x16))+(((0.7)*x24))+((x5*((((x13*x29))+(((-1.0)*x20*x24))))))+(((0.5)*x52))+((x10*((((x12*x24))+(((0.17)*x52))))))+((x15*x24)));
eerot[6]=(((x47*x9))+((x5*x8*(((((-1.0)*x21*x3))+(((-1.0)*x19*x6)))))));
eerot[7]=(((x47*x8))+((x37*x5*x9)));
eerot[8]=(((x26*x37))+((x10*(((((-1.0)*x33))+((x6*x7)))))));
eetrans[2]=((0.275)+(((0.7)*x6))+((x10*(((((-0.17)*x30))+((x12*x6))))))+(((-0.5)*x30))+((x5*(((((-1.0)*x20*x6))+(((-1.0)*x13*x3))))))+((x26*(((((0.17)*x25))+((x12*x3))))))+((x15*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-0.17)*r02))+px);
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-0.17)*r12))+py);
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((-0.275)+(((-0.17)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x56=((396.9)*px);
IkReal x57=((1715.0)*rxp1_1);
IkReal x58=((261.8511)*r01);
IkReal x59=((261.8511)*r21);
IkReal x60=((396.9)*pz);
IkReal x61=((3430.0)*rxp0_1);
IkReal x62=((523.7022)*r00);
IkReal x63=((81.0)*r11);
IkReal x64=((500.0)*py);
IkReal x65=((793.8)*py);
IkReal x66=((3430.0)*rxp1_0);
IkReal x67=((523.7022)*r11);
IkReal x68=((6860.0)*rxp0_0);
IkReal x69=((1047.4044)*r10);
IkReal x70=((324.0)*r00);
IkReal x71=((1000.0)*px);
IkReal x72=((162.0)*r01);
IkReal x73=((162.0)*r10);
IkReal x74=((1225.0)*pp);
IkReal x75=((4900.0)*npx);
IkReal x76=((2450.0)*pp);
IkReal x77=((2450.0)*npy);
IkReal x78=(px*x77);
IkReal x79=(r01*x74);
IkReal x80=(r21*x74);
IkReal x81=(pz*x77);
IkReal x82=(px*x75);
IkReal x83=(r00*x76);
IkReal x84=(x64+(((-1.0)*x63)));
IkReal x85=((-162.0)*r10);
IkReal x86=((4900.0)*npy*py);
IkReal x87=(r11*x76);
IkReal x88=((9800.0)*npx*py);
IkReal x89=((4900.0)*pp*r10);
IkReal x90=((((-1.0)*x71))+x72);
IkReal x91=(x63+(((-1.0)*x64)));
IkReal x92=(x63+x64);
IkReal x93=((((-1.0)*x71))+(((-1.0)*x72)));
IkReal x94=((-1.0)*x92);
IkReal x95=(x78+x56);
IkReal x96=(x78+x57);
IkReal x97=(x62+x83);
IkReal x98=(x61+x82);
IkReal x99=(x79+x58);
IkReal x100=(x67+x87);
IkReal x101=(x66+x86);
IkReal x102=(x59+x80);
IkReal x103=(x69+x89);
IkReal x104=(((pz*x75))+(((-523.7022)*r20))+(((-1.0)*r20*x76)));
IkReal x105=(x61+x97);
IkReal x106=(x57+x99);
IkReal x107=(x56+x99);
IkReal x108=(x57+x95);
IkReal x109=((((-1.0)*x102))+x81+(((-1.0)*x60)));
IkReal x110=(x102+(((-1.0)*x60))+(((-1.0)*x81)));
IkReal x111=(x106+x56);
op[0]=((((-1.0)*x78))+x111);
op[1]=x109;
op[2]=(x105+(((-1.0)*x82)));
op[3]=x104;
op[4]=((((-1.0)*x106))+x95);
op[5]=x110;
op[6]=x109;
op[7]=((((-1.0)*x107))+x96);
op[8]=x104;
op[9]=(x98+(((-1.0)*x97)));
op[10]=x110;
op[11]=((((-1.0)*x108))+x99);
op[12]=x84;
op[13]=x84;
op[14]=x85;
op[15]=x85;
op[16]=x92;
op[17]=x92;
op[18]=0;
op[19]=x84;
op[20]=0;
op[21]=x85;
op[22]=0;
op[23]=x92;
op[24]=((((-1.0)*x101))+x100+x65);
op[25]=0;
op[26]=(x103+(((-1.0)*x68))+(((-1.0)*x88)));
op[27]=0;
op[28]=((((-1.0)*x100))+x101+x65);
op[29]=0;
op[30]=0;
op[31]=((((-1.0)*x100))+x86+(((-1.0)*x66))+(((-1.0)*x65)));
op[32]=0;
op[33]=((((-1.0)*x103))+x88+(((-1.0)*x68)));
op[34]=0;
op[35]=(x100+x66+(((-1.0)*x65))+(((-1.0)*x86)));
op[36]=x90;
op[37]=x90;
op[38]=x70;
op[39]=x70;
op[40]=x93;
op[41]=x93;
op[42]=0;
op[43]=x90;
op[44]=0;
op[45]=x70;
op[46]=0;
op[47]=x93;
op[48]=((((-1.0)*x111))+x78);
op[49]=x109;
op[50]=((((-1.0)*x105))+x82);
op[51]=x104;
op[52]=(x106+(((-1.0)*x95)));
op[53]=x110;
op[54]=x109;
op[55]=(x107+(((-1.0)*x96)));
op[56]=x104;
op[57]=(x97+(((-1.0)*x98)));
op[58]=x110;
op[59]=(x108+(((-1.0)*x99)));
op[60]=x91;
op[61]=x91;
op[62]=x73;
op[63]=x73;
op[64]=x94;
op[65]=x94;
op[66]=0;
op[67]=x91;
op[68]=0;
op[69]=x73;
op[70]=0;
op[71]=x94;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x112=htj0*htj0;
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((1.0)+x112),-1);
if(!x113.valid){
continue;
}
cj0array[numsolutions]=((x113.value)*(((1.0)+(((-1.0)*x112)))));
CheckValue<IkReal> x114=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x114.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x114.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x115=htj5*htj5;
CheckValue<IkReal> x116=IKPowWithIntegerCheck(((1.0)+x115),-1);
if(!x116.valid){
continue;
}
cj5array[numsolutions]=((x116.value)*(((1.0)+(((-1.0)*x115)))));
CheckValue<IkReal> x117=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x117.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x117.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x118=htj1*htj1;
CheckValue<IkReal> x119=IKPowWithIntegerCheck(((1.0)+x118),-1);
if(!x119.valid){
continue;
}
cj1array[numsolutions]=((x119.value)*(((1.0)+(((-1.0)*x118)))));
CheckValue<IkReal> x120=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x120.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x120.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((((6.17283950617284)*cj0*py))+(((-6.17283950617284)*px*sj0)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x121=((1.0)*sj0);
evalcond[0]=(((cj0*cj5*r11))+(((-1.0)*r00*sj5*x121))+((cj0*r10*sj5))+(((-1.0)*(IKcos(j3))))+(((-1.0)*cj5*r01*x121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x122=cj3*cj3;
j2eval[0]=((1.0)+(((-1.0)*x122)));
j2eval[1]=IKsign(((0.162)+(((-0.162)*x122))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x123=cj5*cj5;
IkReal x124=cj0*cj0;
IkReal x125=r01*r01;
IkReal x126=r00*r00;
IkReal x127=r11*r11;
IkReal x128=r02*r02;
IkReal x129=(cj5*sj5);
IkReal x130=((2.0)*r11);
IkReal x131=(r00*sj0);
IkReal x132=(cj5*sj3);
IkReal x133=(cj0*r12);
IkReal x134=(r02*sj0);
IkReal x135=(sj3*sj5);
IkReal x136=((1.0)*x123);
IkReal x137=(cj0*r01*sj0);
IkReal x138=((2.0)*r00*r01);
IkReal x139=((2.0)*cj0*r10*sj0);
IkReal x140=(x124*x127);
IkReal x141=(x124*x125);
IkReal x142=((((-1.0)*x124*x136*(r10*r10)))+((x123*x140))+((x129*x138))+(((-1.0)*x123*x130*x137))+(((2.0)*x133*x134))+(((-1.0)*x126*x136))+(((-2.0)*r10*x129*x137))+x141+(((-1.0)*x124*x129*x138))+((x123*x125))+((x130*x137))+(((-1.0)*x124*(r12*r12)))+((x124*x128))+(((-1.0)*x140))+(((-1.0)*x125))+(((-1.0)*x128))+(((-1.0)*cj0*x129*x130*x131))+((x123*x124*x126))+((r10*x124*x129*x130))+(((2.0)*cj0*r10*x123*x131))+(((-1.0)*x136*x141)));
j4eval[0]=x142;
j4eval[1]=IKsign(x142);
j4eval[2]=((IKabs(((((-1.0)*cj0*r10*x132))+((x131*x132))+(((-1.0)*r01*sj0*x135))+((cj0*r11*x135)))))+(IKabs((((sj3*x133))+(((-1.0)*sj3*x134))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x143=((2.0)*sj1);
IkReal x144=(cj0*px);
IkReal x145=((2.0)*cj1);
IkReal x146=(py*sj0);
if( IKabs(((-1.4)+((pz*x145))+((x143*x144))+((x143*x146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x144*x145))+(((-1.0)*pz*x143))+((x145*x146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((pz*x145))+((x143*x144))+((x143*x146))))+IKsqr((((x144*x145))+(((-1.0)*pz*x143))+((x145*x146))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((pz*x145))+((x143*x144))+((x143*x146))), (((x144*x145))+(((-1.0)*pz*x143))+((x145*x146))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x147=IKsin(j2);
IkReal x148=IKcos(j2);
IkReal x149=((0.5)*cj1);
IkReal x150=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+(((-1.0)*x147*x149))+pz+((x148*x150)));
evalcond[1]=((((0.7)*sj1))+((x148*x149))+(((-1.0)*py*sj0))+((x147*x150))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x151=cj5*cj5;
IkReal x152=r21*r21;
IkReal x153=((r22*r22)+x152+(((-1.0)*x151*x152))+(((-2.0)*cj5*r20*r21*sj5))+((x151*(r20*r20))));
j4eval[0]=x153;
j4eval[1]=IKsign(x153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x154=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x154;
j4eval[1]=IKsign(x154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x155=cj5*cj5;
IkReal x156=(cj0*r11);
IkReal x157=((1.0)*sj0);
IkReal x158=(cj0*r10);
IkReal x159=(cj5*r20*sj5);
IkReal x160=(r21*x155);
IkReal x161=(cj5*r21*sj5);
IkReal x162=(r20*x155);
IkReal x163=((((-1.0)*r01*x157*x160))+(((-1.0)*r01*x157*x159))+((x156*x160))+((r01*r21*sj0))+(((-1.0)*x158*x162))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r21*x156))+((x156*x159))+((r00*sj0*x162))+((x158*x161))+((r02*r22*sj0))+(((-1.0)*r00*x157*x161)));
j4eval[0]=x163;
j4eval[1]=IKsign(x163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x164=cj5*cj5;
IkReal x165=((1.0)*sj5);
IkReal x166=(cj2*sj1);
IkReal x167=(cj5*r10);
IkReal x168=(cj0*r11);
IkReal x169=((1.0)*cj0);
IkReal x170=(r02*sj0);
IkReal x171=(r01*sj0);
IkReal x172=((1.0)*x171);
IkReal x173=(r21*x164);
IkReal x174=(cj0*cj1*sj2);
IkReal x175=(cj5*r20*sj5);
IkReal x176=(cj5*r00*sj0);
IkReal x177=((1.0)*cj1*sj2);
IkReal x178=(r20*x164);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign((((r22*x170))+(((-1.0)*r12*r22*x169))+((x168*x175))+((x168*x173))+(((-1.0)*r21*x165*x176))+(((-1.0)*r10*x169*x178))+((r21*x171))+((cj0*r21*sj5*x167))+(((-1.0)*r21*x168))+((r00*sj0*x178))+(((-1.0)*cj5*r20*x165*x171))+(((-1.0)*x172*x173)))),-1);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj2*x165*x168))+((sj5*x166*x168))+(((-1.0)*x166*x167*x169))+((x166*x176))+((x167*x174))+(((-1.0)*x165*x166*x171))+(((-1.0)*x176*x177))+((cj1*sj2*sj5*x171)))),IkReal((((x166*x170))+(((-1.0)*x170*x177))+((r12*x174))+(((-1.0)*r12*x166*x169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x179.value)))+(x180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x181=IKsin(j4);
IkReal x182=IKcos(j4);
IkReal x183=(cj2*sj1);
IkReal x184=(r11*sj5);
IkReal x185=(sj1*sj2);
IkReal x186=(cj5*sj0);
IkReal x187=(cj1*cj2);
IkReal x188=(r21*sj5);
IkReal x189=(cj5*r00);
IkReal x190=(r02*sj0);
IkReal x191=(cj5*r10);
IkReal x192=(r01*sj5);
IkReal x193=(cj5*r20);
IkReal x194=((1.0)*cj1*sj2);
IkReal x195=((1.0)*x182);
IkReal x196=(cj0*x181);
IkReal x197=((1.0)*x181);
IkReal x198=(r12*x182);
IkReal x199=(cj0*x182);
IkReal x200=(sj0*x181);
evalcond[0]=((((-1.0)*r22*x195))+(((-1.0)*x194))+x183+(((-1.0)*x193*x197))+((x181*x188)));
evalcond[1]=((((-1.0)*x188*x195))+(((-1.0)*r22*x197))+(((-1.0)*x187))+(((-1.0)*x185))+((x182*x193)));
evalcond[2]=(((cj0*x198))+((x192*x200))+(((-1.0)*x184*x196))+(((-1.0)*x190*x195))+((x191*x196))+(((-1.0)*r00*x186*x197)));
evalcond[3]=(((r00*x182*x186))+(((-1.0)*cj0*x191*x195))+(((-1.0)*x190*x197))+(((-1.0)*sj0*x192*x195))+((x184*x199))+((r12*x196)));
evalcond[4]=(((sj0*x198))+((x189*x196))+x185+x187+(((-1.0)*sj0*x184*x197))+((r10*x181*x186))+((r02*x199))+(((-1.0)*x192*x196)));
evalcond[5]=((((-1.0)*cj0*x189*x195))+(((-1.0)*x194))+x183+((x192*x199))+((r02*x196))+((sj0*x182*x184))+((r12*x200))+(((-1.0)*r10*x186*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x201=(sj0*sj5);
IkReal x202=(cj0*cj5);
IkReal x203=(cj5*r00);
IkReal x204=(cj2*sj1);
IkReal x205=(cj0*r12);
IkReal x206=(cj0*sj5);
IkReal x207=(cj1*sj2);
IkReal x208=(sj0*x207);
IkReal x209=((1.0)*x207);
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal((((x204*x205))+(((-1.0)*r02*sj0*x204))+(((-1.0)*x205*x209))+((r02*x208)))),IkReal((((r11*x204*x206))+(((-1.0)*r01*x201*x204))+(((-1.0)*r10*x202*x204))+((r01*x201*x207))+((r10*x202*x207))+((sj0*x203*x204))+(((-1.0)*x203*x208))+(((-1.0)*r11*x206*x209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r01*x202))+((r00*x206))+((r10*x201)))),-1);
if(!x211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x210.value)+(((1.5707963267949)*(x211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x212=IKsin(j4);
IkReal x213=IKcos(j4);
IkReal x214=(cj2*sj1);
IkReal x215=(r11*sj5);
IkReal x216=(sj1*sj2);
IkReal x217=(cj5*sj0);
IkReal x218=(cj1*cj2);
IkReal x219=(r21*sj5);
IkReal x220=(cj5*r00);
IkReal x221=(r02*sj0);
IkReal x222=(cj5*r10);
IkReal x223=(r01*sj5);
IkReal x224=(cj5*r20);
IkReal x225=((1.0)*cj1*sj2);
IkReal x226=((1.0)*x213);
IkReal x227=(cj0*x212);
IkReal x228=((1.0)*x212);
IkReal x229=(r12*x213);
IkReal x230=(cj0*x213);
IkReal x231=(sj0*x212);
evalcond[0]=((((-1.0)*x224*x228))+x214+((x212*x219))+(((-1.0)*x225))+(((-1.0)*r22*x226)));
evalcond[1]=(((x213*x224))+(((-1.0)*x219*x226))+(((-1.0)*x218))+(((-1.0)*x216))+(((-1.0)*r22*x228)));
evalcond[2]=(((x222*x227))+(((-1.0)*x215*x227))+((cj0*x229))+(((-1.0)*x221*x226))+(((-1.0)*r00*x217*x228))+((x223*x231)));
evalcond[3]=((((-1.0)*sj0*x223*x226))+((r12*x227))+(((-1.0)*cj0*x222*x226))+(((-1.0)*x221*x228))+((x215*x230))+((r00*x213*x217)));
evalcond[4]=(((r02*x230))+(((-1.0)*sj0*x215*x228))+((r10*x212*x217))+((sj0*x229))+x216+x218+((x220*x227))+(((-1.0)*x223*x227)));
evalcond[5]=((((-1.0)*cj0*x220*x226))+((sj0*x213*x215))+(((-1.0)*r10*x217*x226))+x214+((r02*x227))+(((-1.0)*x225))+((x223*x230))+((r12*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x232=cj5*cj5;
IkReal x233=r21*r21;
IkReal x234=(cj5*r20);
IkReal x235=(sj1*sj2);
IkReal x236=(cj1*cj2);
IkReal x237=(cj2*sj1);
IkReal x238=((1.0)*r22);
IkReal x239=(r21*sj5);
IkReal x240=((1.0)*cj1*sj2);
IkReal x241=((1.0)*x239);
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal((((x234*x237))+((cj1*sj2*x239))+(((-1.0)*x235*x238))+(((-1.0)*x234*x240))+(((-1.0)*x237*x241))+(((-1.0)*x236*x238)))),IkReal((((x234*x235))+((x234*x236))+(((-1.0)*x236*x241))+(((-1.0)*x235*x241))+(((-1.0)*cj1*sj2*x238))+((r22*x237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
CheckValue<IkReal> x243=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x232*x233))+x233+(((-2.0)*x234*x239))+((x232*(r20*r20))))),-1);
if(!x243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x242.value)+(((1.5707963267949)*(x243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x244=IKsin(j4);
IkReal x245=IKcos(j4);
IkReal x246=(cj2*sj1);
IkReal x247=(r11*sj5);
IkReal x248=(sj1*sj2);
IkReal x249=(cj5*sj0);
IkReal x250=(cj1*cj2);
IkReal x251=(r21*sj5);
IkReal x252=(cj5*r00);
IkReal x253=(r02*sj0);
IkReal x254=(cj5*r10);
IkReal x255=(r01*sj5);
IkReal x256=(cj5*r20);
IkReal x257=((1.0)*cj1*sj2);
IkReal x258=((1.0)*x245);
IkReal x259=(cj0*x244);
IkReal x260=((1.0)*x244);
IkReal x261=(r12*x245);
IkReal x262=(cj0*x245);
IkReal x263=(sj0*x244);
evalcond[0]=((((-1.0)*r22*x258))+x246+(((-1.0)*x256*x260))+((x244*x251))+(((-1.0)*x257)));
evalcond[1]=(((x245*x256))+(((-1.0)*x248))+(((-1.0)*x251*x258))+(((-1.0)*r22*x260))+(((-1.0)*x250)));
evalcond[2]=(((cj0*x261))+(((-1.0)*x247*x259))+((x255*x263))+((x254*x259))+(((-1.0)*x253*x258))+(((-1.0)*r00*x249*x260)));
evalcond[3]=(((r12*x259))+(((-1.0)*sj0*x255*x258))+(((-1.0)*x253*x260))+((r00*x245*x249))+((x247*x262))+(((-1.0)*cj0*x254*x258)));
evalcond[4]=(((r02*x262))+(((-1.0)*sj0*x247*x260))+x250+x248+(((-1.0)*x255*x259))+((x252*x259))+((r10*x244*x249))+((sj0*x261)));
evalcond[5]=(((sj0*x245*x247))+x246+((x255*x262))+(((-1.0)*cj0*x252*x258))+(((-1.0)*r10*x249*x258))+((r12*x263))+((r02*x259))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x264=((2.0)*sj1);
IkReal x265=(cj0*px);
IkReal x266=((2.0)*cj1);
IkReal x267=(py*sj0);
if( IKabs(((-1.4)+((x264*x267))+((x264*x265))+((pz*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x266*x267))+((x265*x266))+(((-1.0)*pz*x264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((x264*x267))+((x264*x265))+((pz*x266))))+IKsqr((((x266*x267))+((x265*x266))+(((-1.0)*pz*x264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((x264*x267))+((x264*x265))+((pz*x266))), (((x266*x267))+((x265*x266))+(((-1.0)*pz*x264))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x268=IKsin(j2);
IkReal x269=IKcos(j2);
IkReal x270=((0.5)*cj1);
IkReal x271=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+pz+(((-1.0)*x268*x270))+((x269*x271)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*py*sj0))+((x269*x270))+(((-1.0)*cj0*px))+((x268*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x272=cj5*cj5;
IkReal x273=r21*r21;
IkReal x274=((r22*r22)+x273+(((-2.0)*cj5*r20*r21*sj5))+((x272*(r20*r20)))+(((-1.0)*x272*x273)));
j4eval[0]=x274;
j4eval[1]=IKsign(x274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x275=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x275;
j4eval[1]=IKsign(x275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x276=cj5*cj5;
IkReal x277=(r00*sj0);
IkReal x278=((1.0)*sj0);
IkReal x279=(r01*r21);
IkReal x280=(cj0*r10);
IkReal x281=(cj0*r11*r21);
IkReal x282=(cj5*r21*sj5);
IkReal x283=((1.0)*x276);
IkReal x284=(cj5*r20*sj5);
IkReal x285=((((-1.0)*r20*x277*x283))+(((-1.0)*x280*x282))+((r01*sj0*x284))+(((-1.0)*x281*x283))+(((-1.0)*r02*r22*x278))+x281+((cj0*r12*r22))+((r20*x276*x280))+(((-1.0)*x278*x279))+((sj0*x276*x279))+((x277*x282))+(((-1.0)*cj0*r11*x284)));
j4eval[0]=x285;
j4eval[1]=IKsign(x285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x286=cj5*cj5;
IkReal x287=((1.0)*sj0);
IkReal x288=(cj1*cj2);
IkReal x289=(cj0*sj5);
IkReal x290=(sj1*sj2);
IkReal x291=(r01*sj5);
IkReal x292=(r01*r21);
IkReal x293=(cj5*r20);
IkReal x294=(cj0*r12);
IkReal x295=((1.0)*cj5*r10);
IkReal x296=(r20*x286);
IkReal x297=(cj5*r00*sj0);
IkReal x298=(cj0*r11*r21);
CheckValue<IkReal> x299=IKPowWithIntegerCheck(IKsign(((((-1.0)*x286*x298))+x298+(((-1.0)*r21*x289*x295))+(((-1.0)*r02*r22*x287))+((sj0*x286*x292))+(((-1.0)*x287*x292))+((cj0*r10*x296))+((sj0*x291*x293))+(((-1.0)*r00*x287*x296))+(((-1.0)*r11*x289*x293))+((r22*x294))+((r21*sj5*x297)))),-1);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300 = IKatan2WithCheck(IkReal((((x290*x294))+(((-1.0)*r02*x287*x288))+(((-1.0)*r02*x287*x290))+((x288*x294)))),IkReal((((x290*x297))+((r11*x288*x289))+((r11*x289*x290))+(((-1.0)*cj0*x290*x295))+(((-1.0)*x287*x288*x291))+(((-1.0)*x287*x290*x291))+(((-1.0)*cj0*x288*x295))+((x288*x297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x299.value)))+(x300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x301=IKcos(j4);
IkReal x302=IKsin(j4);
IkReal x303=(sj1*sj2);
IkReal x304=(cj1*cj2);
IkReal x305=(r11*sj5);
IkReal x306=(cj5*sj0);
IkReal x307=(r21*sj5);
IkReal x308=(cj1*sj2);
IkReal x309=(cj5*r00);
IkReal x310=(r02*sj0);
IkReal x311=(cj2*sj1);
IkReal x312=(cj5*r10);
IkReal x313=(r01*sj5);
IkReal x314=(cj5*r20);
IkReal x315=((1.0)*x301);
IkReal x316=(cj0*x302);
IkReal x317=((1.0)*x302);
IkReal x318=(sj0*x301);
IkReal x319=(cj0*x301);
IkReal x320=(sj0*x302);
IkReal x321=(x304+x303);
evalcond[0]=(((x301*x314))+x321+(((-1.0)*x307*x315))+(((-1.0)*r22*x317)));
evalcond[1]=((((-1.0)*x308))+x311+((x302*x307))+(((-1.0)*x314*x317))+(((-1.0)*r22*x315)));
evalcond[2]=((((-1.0)*x310*x315))+((x312*x316))+((x313*x320))+((r12*x319))+(((-1.0)*r00*x306*x317))+(((-1.0)*x305*x316)));
evalcond[3]=(((x305*x319))+(((-1.0)*x310*x317))+((r00*x301*x306))+(((-1.0)*sj0*x313*x315))+(((-1.0)*cj0*x312*x315))+((r12*x316)));
evalcond[4]=((((-1.0)*x313*x316))+((r02*x319))+((r10*x302*x306))+(((-1.0)*sj0*x305*x317))+x321+((x309*x316))+((r12*x318)));
evalcond[5]=(((x305*x318))+(((-1.0)*r10*x306*x315))+((r02*x316))+((r12*x320))+(((-1.0)*cj0*x309*x315))+x308+(((-1.0)*x311))+((x313*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x322=(cj1*cj2);
IkReal x323=(sj1*sj2);
IkReal x324=(r02*sj0);
IkReal x325=(cj5*sj0);
IkReal x326=(sj0*sj5);
IkReal x327=((1.0)*r01);
IkReal x328=(cj0*r11*sj5);
IkReal x329=((1.0)*cj0*r12);
IkReal x330=((1.0)*cj0*cj5*r10);
CheckValue<IkReal> x331 = IKatan2WithCheck(IkReal((((x322*x328))+((x323*x328))+(((-1.0)*x323*x330))+(((-1.0)*x323*x326*x327))+((r00*x322*x325))+(((-1.0)*x322*x330))+((r00*x323*x325))+(((-1.0)*x322*x326*x327)))),IkReal((((x322*x324))+((x323*x324))+(((-1.0)*x322*x329))+(((-1.0)*x323*x329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332=IKPowWithIntegerCheck(IKsign((((cj0*cj5*r01))+((r11*x325))+((r10*x326))+((cj0*r00*sj5)))),-1);
if(!x332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x331.value)+(((1.5707963267949)*(x332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x333=IKcos(j4);
IkReal x334=IKsin(j4);
IkReal x335=(sj1*sj2);
IkReal x336=(cj1*cj2);
IkReal x337=(r11*sj5);
IkReal x338=(cj5*sj0);
IkReal x339=(r21*sj5);
IkReal x340=(cj1*sj2);
IkReal x341=(cj5*r00);
IkReal x342=(r02*sj0);
IkReal x343=(cj2*sj1);
IkReal x344=(cj5*r10);
IkReal x345=(r01*sj5);
IkReal x346=(cj5*r20);
IkReal x347=((1.0)*x333);
IkReal x348=(cj0*x334);
IkReal x349=((1.0)*x334);
IkReal x350=(sj0*x333);
IkReal x351=(cj0*x333);
IkReal x352=(sj0*x334);
IkReal x353=(x336+x335);
evalcond[0]=((((-1.0)*r22*x349))+x353+((x333*x346))+(((-1.0)*x339*x347)));
evalcond[1]=((((-1.0)*r22*x347))+((x334*x339))+x343+(((-1.0)*x346*x349))+(((-1.0)*x340)));
evalcond[2]=(((r12*x351))+((x345*x352))+((x344*x348))+(((-1.0)*x337*x348))+(((-1.0)*r00*x338*x349))+(((-1.0)*x342*x347)));
evalcond[3]=((((-1.0)*sj0*x345*x347))+(((-1.0)*cj0*x344*x347))+((x337*x351))+((r00*x333*x338))+(((-1.0)*x342*x349))+((r12*x348)));
evalcond[4]=(((r12*x350))+x353+((r10*x334*x338))+((x341*x348))+(((-1.0)*x345*x348))+(((-1.0)*sj0*x337*x349))+((r02*x351)));
evalcond[5]=((((-1.0)*cj0*x341*x347))+((r12*x352))+((x345*x351))+((x337*x350))+x340+((r02*x348))+(((-1.0)*r10*x338*x347))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x354=cj5*cj5;
IkReal x355=r21*r21;
IkReal x356=((1.0)*cj1);
IkReal x357=(cj5*r20);
IkReal x358=(r22*sj2);
IkReal x359=(r21*sj5);
IkReal x360=(sj1*sj2);
IkReal x361=(cj2*sj1);
IkReal x362=(cj1*cj2);
CheckValue<IkReal> x363 = IKatan2WithCheck(IkReal((((cj1*sj2*x359))+(((-1.0)*x359*x361))+((sj1*x358))+((r22*x362))+(((-1.0)*sj2*x356*x357))+((x357*x361)))),IkReal(((((-1.0)*x357*x360))+(((-1.0)*cj2*x356*x357))+(((-1.0)*x356*x358))+((x359*x360))+((x359*x362))+((r22*x361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(((r22*r22)+x355+(((-2.0)*x357*x359))+((x354*(r20*r20)))+(((-1.0)*x354*x355)))),-1);
if(!x364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x363.value)+(((1.5707963267949)*(x364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x365=IKcos(j4);
IkReal x366=IKsin(j4);
IkReal x367=(sj1*sj2);
IkReal x368=(cj1*cj2);
IkReal x369=(r11*sj5);
IkReal x370=(cj5*sj0);
IkReal x371=(r21*sj5);
IkReal x372=(cj1*sj2);
IkReal x373=(cj5*r00);
IkReal x374=(r02*sj0);
IkReal x375=(cj2*sj1);
IkReal x376=(cj5*r10);
IkReal x377=(r01*sj5);
IkReal x378=(cj5*r20);
IkReal x379=((1.0)*x365);
IkReal x380=(cj0*x366);
IkReal x381=((1.0)*x366);
IkReal x382=(sj0*x365);
IkReal x383=(cj0*x365);
IkReal x384=(sj0*x366);
IkReal x385=(x368+x367);
evalcond[0]=((((-1.0)*r22*x381))+((x365*x378))+x385+(((-1.0)*x371*x379)));
evalcond[1]=((((-1.0)*x372))+((x366*x371))+x375+(((-1.0)*x378*x381))+(((-1.0)*r22*x379)));
evalcond[2]=(((x377*x384))+((x376*x380))+(((-1.0)*x369*x380))+((r12*x383))+(((-1.0)*x374*x379))+(((-1.0)*r00*x370*x381)));
evalcond[3]=((((-1.0)*x374*x381))+((r12*x380))+(((-1.0)*cj0*x376*x379))+((r00*x365*x370))+(((-1.0)*sj0*x377*x379))+((x369*x383)));
evalcond[4]=(((x373*x380))+((r12*x382))+((r02*x383))+(((-1.0)*sj0*x369*x381))+x385+(((-1.0)*x377*x380))+((r10*x366*x370)));
evalcond[5]=((((-1.0)*r10*x370*x379))+(((-1.0)*cj0*x373*x379))+(((-1.0)*x375))+((x377*x383))+((r12*x384))+((r02*x380))+x372+((x369*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((-1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x386=((2.0)*sj1);
IkReal x387=(cj0*px);
IkReal x388=((2.0)*cj1);
IkReal x389=(py*sj0);
if( IKabs(((-1.4)+((x386*x389))+((x386*x387))+((pz*x388)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x387*x388))+((x388*x389))+(((-1.0)*pz*x386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((x386*x389))+((x386*x387))+((pz*x388))))+IKsqr((((x387*x388))+((x388*x389))+(((-1.0)*pz*x386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((x386*x389))+((x386*x387))+((pz*x388))), (((x387*x388))+((x388*x389))+(((-1.0)*pz*x386))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x390=IKsin(j2);
IkReal x391=IKcos(j2);
IkReal x392=((0.5)*cj1);
IkReal x393=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x391*x393))+pz+(((-1.0)*x390*x392)));
evalcond[1]=((((0.7)*sj1))+((x391*x392))+(((-1.0)*py*sj0))+((x390*x393))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x394=cj5*cj5;
IkReal x395=r21*r21;
IkReal x396=((r22*r22)+(((-1.0)*x394*x395))+x395+((x394*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5)));
j4eval[0]=x396;
j4eval[1]=IKsign(x396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x397=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x397;
j4eval[1]=IKsign(x397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x398=cj5*cj5;
IkReal x399=(cj0*r11);
IkReal x400=((1.0)*sj0);
IkReal x401=(cj0*r10);
IkReal x402=(cj5*r20*sj5);
IkReal x403=(r21*x398);
IkReal x404=(cj5*r21*sj5);
IkReal x405=(r20*x398);
IkReal x406=((((-1.0)*r01*x400*x403))+(((-1.0)*r01*x400*x402))+(((-1.0)*r00*x400*x404))+((r00*sj0*x405))+((r01*r21*sj0))+(((-1.0)*r21*x399))+(((-1.0)*cj0*r12*r22))+((x399*x403))+((x399*x402))+(((-1.0)*x401*x405))+((r02*r22*sj0))+((x401*x404)));
j4eval[0]=x406;
j4eval[1]=IKsign(x406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x407=cj5*cj5;
IkReal x408=((1.0)*sj5);
IkReal x409=(cj2*sj1);
IkReal x410=(cj5*r10);
IkReal x411=(cj0*r11);
IkReal x412=((1.0)*cj0);
IkReal x413=(r02*sj0);
IkReal x414=(r01*sj0);
IkReal x415=((1.0)*x414);
IkReal x416=(r21*x407);
IkReal x417=(cj0*cj1*sj2);
IkReal x418=(cj5*r20*sj5);
IkReal x419=(cj5*r00*sj0);
IkReal x420=((1.0)*cj1*sj2);
IkReal x421=(r20*x407);
CheckValue<IkReal> x422 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj2*x408*x411))+(((-1.0)*x408*x409*x414))+((x410*x417))+(((-1.0)*x409*x410*x412))+((x409*x419))+((cj1*sj2*sj5*x414))+(((-1.0)*x419*x420))+((sj5*x409*x411)))),IkReal((((r12*x417))+(((-1.0)*r12*x409*x412))+((x409*x413))+(((-1.0)*x413*x420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x412*x421))+(((-1.0)*r21*x408*x419))+((cj0*r21*sj5*x410))+((x411*x418))+((x411*x416))+((r22*x413))+(((-1.0)*r12*r22*x412))+((r00*sj0*x421))+((r21*x414))+(((-1.0)*r21*x411))+(((-1.0)*x415*x416))+(((-1.0)*cj5*r20*x408*x414)))),-1);
if(!x423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x422.value)+(((1.5707963267949)*(x423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=(cj2*sj1);
IkReal x427=(r11*sj5);
IkReal x428=(sj1*sj2);
IkReal x429=(cj5*sj0);
IkReal x430=(cj1*cj2);
IkReal x431=(r21*sj5);
IkReal x432=(cj5*r00);
IkReal x433=(r02*sj0);
IkReal x434=(cj5*r10);
IkReal x435=(r01*sj5);
IkReal x436=(cj5*r20);
IkReal x437=((1.0)*cj1*sj2);
IkReal x438=((1.0)*x425);
IkReal x439=(cj0*x424);
IkReal x440=((1.0)*x424);
IkReal x441=(r12*x425);
IkReal x442=(cj0*x425);
IkReal x443=(sj0*x424);
evalcond[0]=(((x424*x431))+(((-1.0)*x437))+(((-1.0)*x436*x440))+x426+(((-1.0)*r22*x438)));
evalcond[1]=((((-1.0)*x428))+(((-1.0)*x430))+(((-1.0)*x431*x438))+((x425*x436))+(((-1.0)*r22*x440)));
evalcond[2]=(((x435*x443))+(((-1.0)*x433*x438))+((x434*x439))+(((-1.0)*x427*x439))+((cj0*x441))+(((-1.0)*r00*x429*x440)));
evalcond[3]=(((r12*x439))+(((-1.0)*sj0*x435*x438))+(((-1.0)*x433*x440))+((r00*x425*x429))+(((-1.0)*cj0*x434*x438))+((x427*x442)));
evalcond[4]=(((sj0*x441))+((r10*x424*x429))+((r02*x442))+(((-1.0)*x435*x439))+x428+x430+(((-1.0)*sj0*x427*x440))+((x432*x439)));
evalcond[5]=(((x435*x442))+(((-1.0)*x437))+((sj0*x425*x427))+((r02*x439))+(((-1.0)*cj0*x432*x438))+x426+(((-1.0)*r10*x429*x438))+((r12*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x444=(sj0*sj5);
IkReal x445=(cj0*cj5);
IkReal x446=(cj5*r00);
IkReal x447=(cj2*sj1);
IkReal x448=(cj0*r12);
IkReal x449=(cj0*sj5);
IkReal x450=(cj1*sj2);
IkReal x451=(sj0*x450);
IkReal x452=((1.0)*x450);
CheckValue<IkReal> x453=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r01*x445))+((r00*x449))+((r10*x444)))),-1);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal((((x447*x448))+((r02*x451))+(((-1.0)*r02*sj0*x447))+(((-1.0)*x448*x452)))),IkReal((((sj0*x446*x447))+(((-1.0)*r10*x445*x447))+(((-1.0)*x446*x451))+((r11*x447*x449))+(((-1.0)*r11*x449*x452))+(((-1.0)*r01*x444*x447))+((r01*x444*x450))+((r10*x445*x450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x453.value)))+(x454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x455=IKsin(j4);
IkReal x456=IKcos(j4);
IkReal x457=(cj2*sj1);
IkReal x458=(r11*sj5);
IkReal x459=(sj1*sj2);
IkReal x460=(cj5*sj0);
IkReal x461=(cj1*cj2);
IkReal x462=(r21*sj5);
IkReal x463=(cj5*r00);
IkReal x464=(r02*sj0);
IkReal x465=(cj5*r10);
IkReal x466=(r01*sj5);
IkReal x467=(cj5*r20);
IkReal x468=((1.0)*cj1*sj2);
IkReal x469=((1.0)*x456);
IkReal x470=(cj0*x455);
IkReal x471=((1.0)*x455);
IkReal x472=(r12*x456);
IkReal x473=(cj0*x456);
IkReal x474=(sj0*x455);
evalcond[0]=(((x455*x462))+(((-1.0)*x467*x471))+(((-1.0)*x468))+x457+(((-1.0)*r22*x469)));
evalcond[1]=(((x456*x467))+(((-1.0)*x462*x469))+(((-1.0)*x459))+(((-1.0)*x461))+(((-1.0)*r22*x471)));
evalcond[2]=(((x466*x474))+((x465*x470))+(((-1.0)*x464*x469))+(((-1.0)*x458*x470))+(((-1.0)*r00*x460*x471))+((cj0*x472)));
evalcond[3]=((((-1.0)*cj0*x465*x469))+(((-1.0)*x464*x471))+((x458*x473))+(((-1.0)*sj0*x466*x469))+((r12*x470))+((r00*x456*x460)));
evalcond[4]=((((-1.0)*sj0*x458*x471))+((x463*x470))+((r02*x473))+((r10*x455*x460))+x459+x461+((sj0*x472))+(((-1.0)*x466*x470)));
evalcond[5]=((((-1.0)*cj0*x463*x469))+((x466*x473))+(((-1.0)*x468))+((r02*x470))+x457+((sj0*x456*x458))+((r12*x474))+(((-1.0)*r10*x460*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x475=cj5*cj5;
IkReal x476=r21*r21;
IkReal x477=(cj5*r20);
IkReal x478=(sj1*sj2);
IkReal x479=(cj1*cj2);
IkReal x480=(cj2*sj1);
IkReal x481=((1.0)*r22);
IkReal x482=(r21*sj5);
IkReal x483=((1.0)*cj1*sj2);
IkReal x484=((1.0)*x482);
CheckValue<IkReal> x485=IKPowWithIntegerCheck(IKsign(((((-1.0)*x475*x476))+(r22*r22)+(((-2.0)*x477*x482))+x476+((x475*(r20*r20))))),-1);
if(!x485.valid){
continue;
}
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal((((cj1*sj2*x482))+(((-1.0)*x480*x484))+(((-1.0)*x479*x481))+(((-1.0)*x477*x483))+((x477*x480))+(((-1.0)*x478*x481)))),IkReal(((((-1.0)*cj1*sj2*x481))+((r22*x480))+(((-1.0)*x479*x484))+((x477*x478))+((x477*x479))+(((-1.0)*x478*x484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x485.value)))+(x486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x487=IKsin(j4);
IkReal x488=IKcos(j4);
IkReal x489=(cj2*sj1);
IkReal x490=(r11*sj5);
IkReal x491=(sj1*sj2);
IkReal x492=(cj5*sj0);
IkReal x493=(cj1*cj2);
IkReal x494=(r21*sj5);
IkReal x495=(cj5*r00);
IkReal x496=(r02*sj0);
IkReal x497=(cj5*r10);
IkReal x498=(r01*sj5);
IkReal x499=(cj5*r20);
IkReal x500=((1.0)*cj1*sj2);
IkReal x501=((1.0)*x488);
IkReal x502=(cj0*x487);
IkReal x503=((1.0)*x487);
IkReal x504=(r12*x488);
IkReal x505=(cj0*x488);
IkReal x506=(sj0*x487);
evalcond[0]=((((-1.0)*x499*x503))+(((-1.0)*x500))+(((-1.0)*r22*x501))+x489+((x487*x494)));
evalcond[1]=(((x488*x499))+(((-1.0)*r22*x503))+(((-1.0)*x494*x501))+(((-1.0)*x493))+(((-1.0)*x491)));
evalcond[2]=(((x497*x502))+(((-1.0)*x490*x502))+(((-1.0)*x496*x501))+((x498*x506))+((cj0*x504))+(((-1.0)*r00*x492*x503)));
evalcond[3]=(((r00*x488*x492))+((x490*x505))+(((-1.0)*x496*x503))+(((-1.0)*sj0*x498*x501))+((r12*x502))+(((-1.0)*cj0*x497*x501)));
evalcond[4]=((((-1.0)*x498*x502))+(((-1.0)*sj0*x490*x503))+((sj0*x504))+((x495*x502))+x493+x491+((r10*x487*x492))+((r02*x505)));
evalcond[5]=((((-1.0)*r10*x492*x501))+(((-1.0)*x500))+((r12*x506))+x489+((sj0*x488*x490))+((x498*x505))+(((-1.0)*cj0*x495*x501))+((r02*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x507=((2.0)*sj1);
IkReal x508=(cj0*px);
IkReal x509=((2.0)*cj1);
IkReal x510=(py*sj0);
if( IKabs(((-1.4)+((x507*x510))+((x507*x508))+((pz*x509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*pz*x507))+((x508*x509))+((x509*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((x507*x510))+((x507*x508))+((pz*x509))))+IKsqr(((((-1.0)*pz*x507))+((x508*x509))+((x509*x510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((x507*x510))+((x507*x508))+((pz*x509))), ((((-1.0)*pz*x507))+((x508*x509))+((x509*x510))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x511=IKsin(j2);
IkReal x512=IKcos(j2);
IkReal x513=((0.5)*cj1);
IkReal x514=((0.5)*sj1);
evalcond[0]=((((-1.0)*x511*x513))+(((-0.7)*cj1))+((x512*x514))+pz);
evalcond[1]=(((x511*x514))+(((0.7)*sj1))+((x512*x513))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x515=cj5*cj5;
IkReal x516=r21*r21;
IkReal x517=((r22*r22)+((x515*(r20*r20)))+(((-1.0)*x515*x516))+(((-2.0)*cj5*r20*r21*sj5))+x516);
j4eval[0]=x517;
j4eval[1]=IKsign(x517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x518=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x518;
j4eval[1]=IKsign(x518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x519=cj5*cj5;
IkReal x520=(cj0*r11);
IkReal x521=((1.0)*sj0);
IkReal x522=(cj0*r10);
IkReal x523=(cj5*r20*sj5);
IkReal x524=(r21*x519);
IkReal x525=(cj5*r21*sj5);
IkReal x526=(r20*x519);
IkReal x527=(((x522*x525))+(((-1.0)*x522*x526))+((r00*sj0*x526))+(((-1.0)*r21*x520))+((r01*r21*sj0))+((x520*x523))+((x520*x524))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r00*x521*x525))+((r02*r22*sj0))+(((-1.0)*r01*x521*x523))+(((-1.0)*r01*x521*x524)));
j4eval[0]=x527;
j4eval[1]=IKsign(x527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x528=cj5*cj5;
IkReal x529=((1.0)*sj5);
IkReal x530=(cj2*sj1);
IkReal x531=(cj5*r10);
IkReal x532=(cj0*r11);
IkReal x533=((1.0)*cj0);
IkReal x534=(r02*sj0);
IkReal x535=(r01*sj0);
IkReal x536=((1.0)*x535);
IkReal x537=(r21*x528);
IkReal x538=(cj0*cj1*sj2);
IkReal x539=(cj5*r20*sj5);
IkReal x540=(cj5*r00*sj0);
IkReal x541=((1.0)*cj1*sj2);
IkReal x542=(r20*x528);
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x529*x540))+((cj0*r21*sj5*x531))+((r00*sj0*x542))+(((-1.0)*r21*x532))+((r22*x534))+(((-1.0)*r10*x533*x542))+(((-1.0)*r12*r22*x533))+((x532*x539))+((x532*x537))+(((-1.0)*x536*x537))+(((-1.0)*cj5*r20*x529*x535))+((r21*x535)))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal((((sj5*x530*x532))+(((-1.0)*x529*x530*x535))+((x531*x538))+(((-1.0)*x540*x541))+((cj1*sj2*sj5*x535))+(((-1.0)*x530*x531*x533))+(((-1.0)*cj1*sj2*x529*x532))+((x530*x540)))),IkReal(((((-1.0)*x534*x541))+((r12*x538))+((x530*x534))+(((-1.0)*r12*x530*x533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x545=IKsin(j4);
IkReal x546=IKcos(j4);
IkReal x547=(cj2*sj1);
IkReal x548=(r11*sj5);
IkReal x549=(sj1*sj2);
IkReal x550=(cj5*sj0);
IkReal x551=(cj1*cj2);
IkReal x552=(r21*sj5);
IkReal x553=(cj5*r00);
IkReal x554=(r02*sj0);
IkReal x555=(cj5*r10);
IkReal x556=(r01*sj5);
IkReal x557=(cj5*r20);
IkReal x558=((1.0)*cj1*sj2);
IkReal x559=((1.0)*x546);
IkReal x560=(cj0*x545);
IkReal x561=((1.0)*x545);
IkReal x562=(r12*x546);
IkReal x563=(cj0*x546);
IkReal x564=(sj0*x545);
evalcond[0]=((((-1.0)*r22*x559))+(((-1.0)*x557*x561))+(((-1.0)*x558))+x547+((x545*x552)));
evalcond[1]=((((-1.0)*x551))+(((-1.0)*x549))+(((-1.0)*x552*x559))+(((-1.0)*r22*x561))+((x546*x557)));
evalcond[2]=((((-1.0)*x554*x559))+((x556*x564))+(((-1.0)*r00*x550*x561))+((cj0*x562))+(((-1.0)*x548*x560))+((x555*x560)));
evalcond[3]=((((-1.0)*sj0*x556*x559))+((r00*x546*x550))+(((-1.0)*cj0*x555*x559))+((x548*x563))+(((-1.0)*x554*x561))+((r12*x560)));
evalcond[4]=((((-1.0)*x556*x560))+((x553*x560))+((sj0*x562))+x551+x549+((r10*x545*x550))+(((-1.0)*sj0*x548*x561))+((r02*x563)));
evalcond[5]=((((-1.0)*r10*x550*x559))+((sj0*x546*x548))+((x556*x563))+(((-1.0)*x558))+x547+((r12*x564))+((r02*x560))+(((-1.0)*cj0*x553*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x565=(sj0*sj5);
IkReal x566=(cj0*cj5);
IkReal x567=(cj5*r00);
IkReal x568=(cj2*sj1);
IkReal x569=(cj0*r12);
IkReal x570=(cj0*sj5);
IkReal x571=(cj1*sj2);
IkReal x572=(sj0*x571);
IkReal x573=((1.0)*x571);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*x569*x573))+((r02*x572))+(((-1.0)*r02*sj0*x568))+((x568*x569)))),IkReal((((r01*x565*x571))+(((-1.0)*r10*x566*x568))+(((-1.0)*x567*x572))+(((-1.0)*r11*x570*x573))+((r10*x566*x571))+(((-1.0)*r01*x565*x568))+((r11*x568*x570))+((sj0*x567*x568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign((((r00*x570))+((cj5*r11*sj0))+((r01*x566))+((r10*x565)))),-1);
if(!x575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x576=IKsin(j4);
IkReal x577=IKcos(j4);
IkReal x578=(cj2*sj1);
IkReal x579=(r11*sj5);
IkReal x580=(sj1*sj2);
IkReal x581=(cj5*sj0);
IkReal x582=(cj1*cj2);
IkReal x583=(r21*sj5);
IkReal x584=(cj5*r00);
IkReal x585=(r02*sj0);
IkReal x586=(cj5*r10);
IkReal x587=(r01*sj5);
IkReal x588=(cj5*r20);
IkReal x589=((1.0)*cj1*sj2);
IkReal x590=((1.0)*x577);
IkReal x591=(cj0*x576);
IkReal x592=((1.0)*x576);
IkReal x593=(r12*x577);
IkReal x594=(cj0*x577);
IkReal x595=(sj0*x576);
evalcond[0]=((((-1.0)*x588*x592))+x578+(((-1.0)*r22*x590))+((x576*x583))+(((-1.0)*x589)));
evalcond[1]=((((-1.0)*x582))+(((-1.0)*x580))+((x577*x588))+(((-1.0)*x583*x590))+(((-1.0)*r22*x592)));
evalcond[2]=((((-1.0)*x579*x591))+(((-1.0)*x585*x590))+(((-1.0)*r00*x581*x592))+((x586*x591))+((cj0*x593))+((x587*x595)));
evalcond[3]=((((-1.0)*sj0*x587*x590))+(((-1.0)*x585*x592))+(((-1.0)*cj0*x586*x590))+((x579*x594))+((r12*x591))+((r00*x577*x581)));
evalcond[4]=(((r02*x594))+(((-1.0)*x587*x591))+((x584*x591))+x580+x582+((sj0*x593))+(((-1.0)*sj0*x579*x592))+((r10*x576*x581)));
evalcond[5]=((((-1.0)*cj0*x584*x590))+((sj0*x577*x579))+((r02*x591))+x578+((r12*x595))+(((-1.0)*r10*x581*x590))+(((-1.0)*x589))+((x587*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x596=cj5*cj5;
IkReal x597=r21*r21;
IkReal x598=(cj5*r20);
IkReal x599=(sj1*sj2);
IkReal x600=(cj1*cj2);
IkReal x601=(cj2*sj1);
IkReal x602=((1.0)*r22);
IkReal x603=(r21*sj5);
IkReal x604=((1.0)*cj1*sj2);
IkReal x605=((1.0)*x603);
CheckValue<IkReal> x606=IKPowWithIntegerCheck(IKsign(((((-2.0)*x598*x603))+(r22*r22)+(((-1.0)*x596*x597))+x597+((x596*(r20*r20))))),-1);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607 = IKatan2WithCheck(IkReal((((cj1*sj2*x603))+(((-1.0)*x599*x602))+(((-1.0)*x598*x604))+(((-1.0)*x600*x602))+((x598*x601))+(((-1.0)*x601*x605)))),IkReal(((((-1.0)*cj1*sj2*x602))+((x598*x599))+(((-1.0)*x599*x605))+(((-1.0)*x600*x605))+((r22*x601))+((x598*x600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x606.value)))+(x607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x608=IKsin(j4);
IkReal x609=IKcos(j4);
IkReal x610=(cj2*sj1);
IkReal x611=(r11*sj5);
IkReal x612=(sj1*sj2);
IkReal x613=(cj5*sj0);
IkReal x614=(cj1*cj2);
IkReal x615=(r21*sj5);
IkReal x616=(cj5*r00);
IkReal x617=(r02*sj0);
IkReal x618=(cj5*r10);
IkReal x619=(r01*sj5);
IkReal x620=(cj5*r20);
IkReal x621=((1.0)*cj1*sj2);
IkReal x622=((1.0)*x609);
IkReal x623=(cj0*x608);
IkReal x624=((1.0)*x608);
IkReal x625=(r12*x609);
IkReal x626=(cj0*x609);
IkReal x627=(sj0*x608);
evalcond[0]=(((x608*x615))+(((-1.0)*x621))+(((-1.0)*x620*x624))+x610+(((-1.0)*r22*x622)));
evalcond[1]=((((-1.0)*x614))+(((-1.0)*x612))+((x609*x620))+(((-1.0)*x615*x622))+(((-1.0)*r22*x624)));
evalcond[2]=(((x619*x627))+((x618*x623))+(((-1.0)*x617*x622))+((cj0*x625))+(((-1.0)*r00*x613*x624))+(((-1.0)*x611*x623)));
evalcond[3]=((((-1.0)*sj0*x619*x622))+(((-1.0)*x617*x624))+((r00*x609*x613))+((x611*x626))+((r12*x623))+(((-1.0)*cj0*x618*x622)));
evalcond[4]=(((r02*x626))+((x616*x623))+(((-1.0)*sj0*x611*x624))+((sj0*x625))+((r10*x608*x613))+(((-1.0)*x619*x623))+x614+x612);
evalcond[5]=(((r02*x623))+(((-1.0)*r10*x613*x622))+((x619*x626))+(((-1.0)*x621))+((sj0*x609*x611))+x610+((r12*x627))+(((-1.0)*cj0*x616*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x628=((2.0)*sj1);
IkReal x629=(cj0*px);
IkReal x630=((2.0)*cj1);
IkReal x631=(py*sj0);
if( IKabs(((-1.4)+((pz*x630))+((x628*x631))+((x628*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*pz*x628))+((x629*x630))+((x630*x631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((pz*x630))+((x628*x631))+((x628*x629))))+IKsqr(((((-1.0)*pz*x628))+((x629*x630))+((x630*x631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((pz*x630))+((x628*x631))+((x628*x629))), ((((-1.0)*pz*x628))+((x629*x630))+((x630*x631))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x632=IKsin(j2);
IkReal x633=IKcos(j2);
IkReal x634=((0.5)*cj1);
IkReal x635=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+pz+((x633*x635))+(((-1.0)*x632*x634)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*py*sj0))+((x632*x635))+((x633*x634))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x636=cj5*cj5;
IkReal x637=r21*r21;
IkReal x638=((r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+x637+(((-1.0)*x636*x637))+((x636*(r20*r20))));
j4eval[0]=x638;
j4eval[1]=IKsign(x638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x639=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x639;
j4eval[1]=IKsign(x639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x640=cj5*cj5;
IkReal x641=(r00*sj0);
IkReal x642=((1.0)*sj0);
IkReal x643=(r01*r21);
IkReal x644=(cj0*r10);
IkReal x645=(cj0*r11*r21);
IkReal x646=(cj5*r21*sj5);
IkReal x647=((1.0)*x640);
IkReal x648=(cj5*r20*sj5);
IkReal x649=(((sj0*x640*x643))+(((-1.0)*cj0*r11*x648))+(((-1.0)*x642*x643))+(((-1.0)*r20*x641*x647))+((r20*x640*x644))+(((-1.0)*r02*r22*x642))+((x641*x646))+(((-1.0)*x644*x646))+x645+((cj0*r12*r22))+(((-1.0)*x645*x647))+((r01*sj0*x648)));
j4eval[0]=x649;
j4eval[1]=IKsign(x649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x650=cj5*cj5;
IkReal x651=((1.0)*sj0);
IkReal x652=(cj1*cj2);
IkReal x653=(cj0*sj5);
IkReal x654=(sj1*sj2);
IkReal x655=(r01*sj5);
IkReal x656=(r01*r21);
IkReal x657=(cj5*r20);
IkReal x658=(cj0*r12);
IkReal x659=((1.0)*cj5*r10);
IkReal x660=(r20*x650);
IkReal x661=(cj5*r00*sj0);
IkReal x662=(cj0*r11*r21);
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x651*x652))+(((-1.0)*r02*x651*x654))+((x652*x658))+((x654*x658)))),IkReal(((((-1.0)*x651*x652*x655))+((r11*x653*x654))+((r11*x652*x653))+((x654*x661))+((x652*x661))+(((-1.0)*cj0*x652*x659))+(((-1.0)*x651*x654*x655))+(((-1.0)*cj0*x654*x659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x653*x657))+((cj0*r10*x660))+(((-1.0)*x651*x656))+((sj0*x655*x657))+((r21*sj5*x661))+((r22*x658))+(((-1.0)*r02*r22*x651))+(((-1.0)*r00*x651*x660))+(((-1.0)*r21*x653*x659))+(((-1.0)*x650*x662))+x662+((sj0*x650*x656)))),-1);
if(!x664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x663.value)+(((1.5707963267949)*(x664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x665=IKcos(j4);
IkReal x666=IKsin(j4);
IkReal x667=(sj1*sj2);
IkReal x668=(cj1*cj2);
IkReal x669=(r11*sj5);
IkReal x670=(cj5*sj0);
IkReal x671=(r21*sj5);
IkReal x672=(cj1*sj2);
IkReal x673=(cj5*r00);
IkReal x674=(r02*sj0);
IkReal x675=(cj2*sj1);
IkReal x676=(cj5*r10);
IkReal x677=(r01*sj5);
IkReal x678=(cj5*r20);
IkReal x679=((1.0)*x665);
IkReal x680=(cj0*x666);
IkReal x681=((1.0)*x666);
IkReal x682=(sj0*x665);
IkReal x683=(cj0*x665);
IkReal x684=(sj0*x666);
IkReal x685=(x668+x667);
evalcond[0]=(((x665*x678))+x685+(((-1.0)*x671*x679))+(((-1.0)*r22*x681)));
evalcond[1]=((((-1.0)*r22*x679))+(((-1.0)*x678*x681))+((x666*x671))+x675+(((-1.0)*x672)));
evalcond[2]=((((-1.0)*x669*x680))+((x677*x684))+((x676*x680))+(((-1.0)*r00*x670*x681))+(((-1.0)*x674*x679))+((r12*x683)));
evalcond[3]=(((x669*x683))+(((-1.0)*cj0*x676*x679))+(((-1.0)*sj0*x677*x679))+(((-1.0)*x674*x681))+((r00*x665*x670))+((r12*x680)));
evalcond[4]=(((r10*x666*x670))+(((-1.0)*sj0*x669*x681))+((x673*x680))+(((-1.0)*x677*x680))+x685+((r02*x683))+((r12*x682)));
evalcond[5]=(((x669*x682))+(((-1.0)*cj0*x673*x679))+((x677*x683))+x672+(((-1.0)*x675))+(((-1.0)*r10*x670*x679))+((r02*x680))+((r12*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x686=(cj1*cj2);
IkReal x687=(sj1*sj2);
IkReal x688=(r02*sj0);
IkReal x689=(cj5*sj0);
IkReal x690=(sj0*sj5);
IkReal x691=((1.0)*r01);
IkReal x692=(cj0*r11*sj5);
IkReal x693=((1.0)*cj0*r12);
IkReal x694=((1.0)*cj0*cj5*r10);
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(((((-1.0)*x687*x694))+((x687*x692))+((x686*x692))+(((-1.0)*x687*x690*x691))+(((-1.0)*x686*x694))+(((-1.0)*x686*x690*x691))+((r00*x686*x689))+((r00*x687*x689)))),IkReal(((((-1.0)*x687*x693))+((x686*x688))+((x687*x688))+(((-1.0)*x686*x693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign((((cj0*cj5*r01))+((cj0*r00*sj5))+((r10*x690))+((r11*x689)))),-1);
if(!x696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x695.value)+(((1.5707963267949)*(x696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x697=IKcos(j4);
IkReal x698=IKsin(j4);
IkReal x699=(sj1*sj2);
IkReal x700=(cj1*cj2);
IkReal x701=(r11*sj5);
IkReal x702=(cj5*sj0);
IkReal x703=(r21*sj5);
IkReal x704=(cj1*sj2);
IkReal x705=(cj5*r00);
IkReal x706=(r02*sj0);
IkReal x707=(cj2*sj1);
IkReal x708=(cj5*r10);
IkReal x709=(r01*sj5);
IkReal x710=(cj5*r20);
IkReal x711=((1.0)*x697);
IkReal x712=(cj0*x698);
IkReal x713=((1.0)*x698);
IkReal x714=(sj0*x697);
IkReal x715=(cj0*x697);
IkReal x716=(sj0*x698);
IkReal x717=(x699+x700);
evalcond[0]=((((-1.0)*r22*x713))+(((-1.0)*x703*x711))+((x697*x710))+x717);
evalcond[1]=((((-1.0)*r22*x711))+(((-1.0)*x710*x713))+(((-1.0)*x704))+((x698*x703))+x707);
evalcond[2]=((((-1.0)*x706*x711))+((x709*x716))+(((-1.0)*r00*x702*x713))+((r12*x715))+((x708*x712))+(((-1.0)*x701*x712)));
evalcond[3]=(((x701*x715))+(((-1.0)*x706*x713))+((r00*x697*x702))+(((-1.0)*cj0*x708*x711))+((r12*x712))+(((-1.0)*sj0*x709*x711)));
evalcond[4]=((((-1.0)*sj0*x701*x713))+(((-1.0)*x709*x712))+((r10*x698*x702))+x717+((r12*x714))+((r02*x715))+((x705*x712)));
evalcond[5]=(((x701*x714))+(((-1.0)*r10*x702*x711))+(((-1.0)*x707))+((x709*x715))+(((-1.0)*cj0*x705*x711))+x704+((r12*x716))+((r02*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x718=cj5*cj5;
IkReal x719=r21*r21;
IkReal x720=((1.0)*cj1);
IkReal x721=(cj5*r20);
IkReal x722=(r22*sj2);
IkReal x723=(r21*sj5);
IkReal x724=(sj1*sj2);
IkReal x725=(cj2*sj1);
IkReal x726=(cj1*cj2);
CheckValue<IkReal> x727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x718*x719))+(r22*r22)+(((-2.0)*x721*x723))+((x718*(r20*r20)))+x719)),-1);
if(!x727.valid){
continue;
}
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal((((x721*x725))+(((-1.0)*x723*x725))+(((-1.0)*sj2*x720*x721))+((r22*x726))+((sj1*x722))+((cj1*sj2*x723)))),IkReal(((((-1.0)*x721*x724))+((x723*x724))+((x723*x726))+(((-1.0)*cj2*x720*x721))+(((-1.0)*x720*x722))+((r22*x725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x727.value)))+(x728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x729=IKcos(j4);
IkReal x730=IKsin(j4);
IkReal x731=(sj1*sj2);
IkReal x732=(cj1*cj2);
IkReal x733=(r11*sj5);
IkReal x734=(cj5*sj0);
IkReal x735=(r21*sj5);
IkReal x736=(cj1*sj2);
IkReal x737=(cj5*r00);
IkReal x738=(r02*sj0);
IkReal x739=(cj2*sj1);
IkReal x740=(cj5*r10);
IkReal x741=(r01*sj5);
IkReal x742=(cj5*r20);
IkReal x743=((1.0)*x729);
IkReal x744=(cj0*x730);
IkReal x745=((1.0)*x730);
IkReal x746=(sj0*x729);
IkReal x747=(cj0*x729);
IkReal x748=(sj0*x730);
IkReal x749=(x732+x731);
evalcond[0]=((((-1.0)*r22*x745))+((x729*x742))+x749+(((-1.0)*x735*x743)));
evalcond[1]=((((-1.0)*x742*x745))+(((-1.0)*x736))+(((-1.0)*r22*x743))+x739+((x730*x735)));
evalcond[2]=(((x740*x744))+(((-1.0)*x738*x743))+((x741*x748))+(((-1.0)*r00*x734*x745))+((r12*x747))+(((-1.0)*x733*x744)));
evalcond[3]=((((-1.0)*cj0*x740*x743))+(((-1.0)*x738*x745))+(((-1.0)*sj0*x741*x743))+((r12*x744))+((r00*x729*x734))+((x733*x747)));
evalcond[4]=(((r02*x747))+(((-1.0)*sj0*x733*x745))+((r10*x730*x734))+((x737*x744))+((r12*x746))+x749+(((-1.0)*x741*x744)));
evalcond[5]=(((r02*x744))+(((-1.0)*cj0*x737*x743))+(((-1.0)*x739))+((x741*x747))+(((-1.0)*r10*x734*x743))+((r12*x748))+x736+((x733*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x750=((2.0)*sj1);
IkReal x751=(cj0*px);
IkReal x752=((2.0)*cj1);
IkReal x753=(py*sj0);
if( IKabs(((-1.4)+((pz*x752))+((x750*x753))+((x750*x751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x752*x753))+((x751*x752))+(((-1.0)*pz*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((pz*x752))+((x750*x753))+((x750*x751))))+IKsqr((((x752*x753))+((x751*x752))+(((-1.0)*pz*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((pz*x752))+((x750*x753))+((x750*x751))), (((x752*x753))+((x751*x752))+(((-1.0)*pz*x750))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x754=IKsin(j2);
IkReal x755=IKcos(j2);
IkReal x756=((0.5)*cj1);
IkReal x757=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+(((-1.0)*x754*x756))+pz+((x755*x757)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*py*sj0))+((x755*x756))+(((-1.0)*cj0*px))+((x754*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x758=cj5*cj5;
IkReal x759=r21*r21;
IkReal x760=((r22*r22)+((x758*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5))+x759+(((-1.0)*x758*x759)));
j4eval[0]=x760;
j4eval[1]=IKsign(x760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x761=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x761;
j4eval[1]=IKsign(x761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x762=cj5*cj5;
IkReal x763=(r00*sj0);
IkReal x764=((1.0)*sj0);
IkReal x765=(r01*r21);
IkReal x766=(cj0*r10);
IkReal x767=(cj0*r11*r21);
IkReal x768=(cj5*r21*sj5);
IkReal x769=((1.0)*x762);
IkReal x770=(cj5*r20*sj5);
IkReal x771=(((r20*x762*x766))+((sj0*x762*x765))+((r01*sj0*x770))+(((-1.0)*x764*x765))+((x763*x768))+(((-1.0)*x767*x769))+(((-1.0)*cj0*r11*x770))+(((-1.0)*x766*x768))+((cj0*r12*r22))+(((-1.0)*r20*x763*x769))+x767+(((-1.0)*r02*r22*x764)));
j4eval[0]=x771;
j4eval[1]=IKsign(x771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x772=cj5*cj5;
IkReal x773=((1.0)*sj0);
IkReal x774=(cj1*cj2);
IkReal x775=(cj0*sj5);
IkReal x776=(sj1*sj2);
IkReal x777=(r01*sj5);
IkReal x778=(r01*r21);
IkReal x779=(cj5*r20);
IkReal x780=(cj0*r12);
IkReal x781=((1.0)*cj5*r10);
IkReal x782=(r20*x772);
IkReal x783=(cj5*r00*sj0);
IkReal x784=(cj0*r11*r21);
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x773))+(((-1.0)*x772*x784))+(((-1.0)*r00*x773*x782))+(((-1.0)*r21*x775*x781))+((sj0*x777*x779))+((r22*x780))+((sj0*x772*x778))+((cj0*r10*x782))+x784+((r21*sj5*x783))+(((-1.0)*x773*x778))+(((-1.0)*r11*x775*x779)))),-1);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x773*x776))+(((-1.0)*r02*x773*x774))+((x774*x780))+((x776*x780)))),IkReal((((r11*x774*x775))+((x774*x783))+((r11*x775*x776))+(((-1.0)*cj0*x774*x781))+(((-1.0)*x773*x774*x777))+(((-1.0)*x773*x776*x777))+(((-1.0)*cj0*x776*x781))+((x776*x783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x785.value)))+(x786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x787=IKcos(j4);
IkReal x788=IKsin(j4);
IkReal x789=(sj1*sj2);
IkReal x790=(cj1*cj2);
IkReal x791=(r11*sj5);
IkReal x792=(cj5*sj0);
IkReal x793=(r21*sj5);
IkReal x794=(cj1*sj2);
IkReal x795=(cj5*r00);
IkReal x796=(r02*sj0);
IkReal x797=(cj2*sj1);
IkReal x798=(cj5*r10);
IkReal x799=(r01*sj5);
IkReal x800=(cj5*r20);
IkReal x801=((1.0)*x787);
IkReal x802=(cj0*x788);
IkReal x803=((1.0)*x788);
IkReal x804=(sj0*x787);
IkReal x805=(cj0*x787);
IkReal x806=(sj0*x788);
IkReal x807=(x790+x789);
evalcond[0]=((((-1.0)*r22*x803))+(((-1.0)*x793*x801))+x807+((x787*x800)));
evalcond[1]=((((-1.0)*r22*x801))+((x788*x793))+(((-1.0)*x800*x803))+x797+(((-1.0)*x794)));
evalcond[2]=((((-1.0)*x796*x801))+((r12*x805))+((x798*x802))+((x799*x806))+(((-1.0)*x791*x802))+(((-1.0)*r00*x792*x803)));
evalcond[3]=((((-1.0)*sj0*x799*x801))+(((-1.0)*x796*x803))+((r12*x802))+((x791*x805))+(((-1.0)*cj0*x798*x801))+((r00*x787*x792)));
evalcond[4]=((((-1.0)*x799*x802))+((r12*x804))+((x795*x802))+((r10*x788*x792))+((r02*x805))+(((-1.0)*sj0*x791*x803))+x807);
evalcond[5]=(((r12*x806))+((x791*x804))+((r02*x802))+(((-1.0)*cj0*x795*x801))+((x799*x805))+(((-1.0)*r10*x792*x801))+x794+(((-1.0)*x797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x808=(cj1*cj2);
IkReal x809=(sj1*sj2);
IkReal x810=(r02*sj0);
IkReal x811=(cj5*sj0);
IkReal x812=(sj0*sj5);
IkReal x813=((1.0)*r01);
IkReal x814=(cj0*r11*sj5);
IkReal x815=((1.0)*cj0*r12);
IkReal x816=((1.0)*cj0*cj5*r10);
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(((((-1.0)*x808*x812*x813))+((x809*x814))+((r00*x809*x811))+(((-1.0)*x808*x816))+(((-1.0)*x809*x816))+((x808*x814))+(((-1.0)*x809*x812*x813))+((r00*x808*x811)))),IkReal((((x809*x810))+(((-1.0)*x808*x815))+(((-1.0)*x809*x815))+((x808*x810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818=IKPowWithIntegerCheck(IKsign((((r11*x811))+((cj0*cj5*r01))+((r10*x812))+((cj0*r00*sj5)))),-1);
if(!x818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x817.value)+(((1.5707963267949)*(x818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x819=IKcos(j4);
IkReal x820=IKsin(j4);
IkReal x821=(sj1*sj2);
IkReal x822=(cj1*cj2);
IkReal x823=(r11*sj5);
IkReal x824=(cj5*sj0);
IkReal x825=(r21*sj5);
IkReal x826=(cj1*sj2);
IkReal x827=(cj5*r00);
IkReal x828=(r02*sj0);
IkReal x829=(cj2*sj1);
IkReal x830=(cj5*r10);
IkReal x831=(r01*sj5);
IkReal x832=(cj5*r20);
IkReal x833=((1.0)*x819);
IkReal x834=(cj0*x820);
IkReal x835=((1.0)*x820);
IkReal x836=(sj0*x819);
IkReal x837=(cj0*x819);
IkReal x838=(sj0*x820);
IkReal x839=(x822+x821);
evalcond[0]=(((x819*x832))+(((-1.0)*r22*x835))+x839+(((-1.0)*x825*x833)));
evalcond[1]=((((-1.0)*x832*x835))+((x820*x825))+(((-1.0)*x826))+(((-1.0)*r22*x833))+x829);
evalcond[2]=(((x831*x838))+(((-1.0)*x828*x833))+(((-1.0)*r00*x824*x835))+(((-1.0)*x823*x834))+((x830*x834))+((r12*x837)));
evalcond[3]=((((-1.0)*x828*x835))+(((-1.0)*cj0*x830*x833))+(((-1.0)*sj0*x831*x833))+((x823*x837))+((r00*x819*x824))+((r12*x834)));
evalcond[4]=(((r02*x837))+((x827*x834))+((r10*x820*x824))+(((-1.0)*sj0*x823*x835))+((r12*x836))+x839+(((-1.0)*x831*x834)));
evalcond[5]=(((x831*x837))+(((-1.0)*cj0*x827*x833))+((r02*x834))+(((-1.0)*r10*x824*x833))+(((-1.0)*x829))+((x823*x836))+((r12*x838))+x826);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x840=cj5*cj5;
IkReal x841=r21*r21;
IkReal x842=((1.0)*cj1);
IkReal x843=(cj5*r20);
IkReal x844=(r22*sj2);
IkReal x845=(r21*sj5);
IkReal x846=(sj1*sj2);
IkReal x847=(cj2*sj1);
IkReal x848=(cj1*cj2);
CheckValue<IkReal> x849=IKPowWithIntegerCheck(IKsign((((x840*(r20*r20)))+(r22*r22)+(((-2.0)*x843*x845))+(((-1.0)*x840*x841))+x841)),-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850 = IKatan2WithCheck(IkReal((((r22*x848))+(((-1.0)*x845*x847))+((cj1*sj2*x845))+((x843*x847))+(((-1.0)*sj2*x842*x843))+((sj1*x844)))),IkReal((((r22*x847))+(((-1.0)*x843*x846))+(((-1.0)*cj2*x842*x843))+(((-1.0)*x842*x844))+((x845*x848))+((x845*x846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x849.value)))+(x850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x851=IKcos(j4);
IkReal x852=IKsin(j4);
IkReal x853=(sj1*sj2);
IkReal x854=(cj1*cj2);
IkReal x855=(r11*sj5);
IkReal x856=(cj5*sj0);
IkReal x857=(r21*sj5);
IkReal x858=(cj1*sj2);
IkReal x859=(cj5*r00);
IkReal x860=(r02*sj0);
IkReal x861=(cj2*sj1);
IkReal x862=(cj5*r10);
IkReal x863=(r01*sj5);
IkReal x864=(cj5*r20);
IkReal x865=((1.0)*x851);
IkReal x866=(cj0*x852);
IkReal x867=((1.0)*x852);
IkReal x868=(sj0*x851);
IkReal x869=(cj0*x851);
IkReal x870=(sj0*x852);
IkReal x871=(x853+x854);
evalcond[0]=(((x851*x864))+x871+(((-1.0)*r22*x867))+(((-1.0)*x857*x865)));
evalcond[1]=((((-1.0)*x858))+(((-1.0)*x864*x867))+((x852*x857))+x861+(((-1.0)*r22*x865)));
evalcond[2]=(((x863*x870))+(((-1.0)*r00*x856*x867))+((r12*x869))+(((-1.0)*x860*x865))+((x862*x866))+(((-1.0)*x855*x866)));
evalcond[3]=((((-1.0)*sj0*x863*x865))+((r12*x866))+(((-1.0)*x860*x867))+((x855*x869))+(((-1.0)*cj0*x862*x865))+((r00*x851*x856)));
evalcond[4]=((((-1.0)*sj0*x855*x867))+((r10*x852*x856))+((r12*x868))+((x859*x866))+((r02*x869))+x871+(((-1.0)*x863*x866)));
evalcond[5]=((((-1.0)*cj0*x859*x865))+((x863*x869))+(((-1.0)*x861))+((r12*x870))+((x855*x868))+(((-1.0)*r10*x856*x865))+((r02*x866))+x858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x872=cj5*cj5;
IkReal x873=cj0*cj0;
IkReal x874=r01*r01;
IkReal x875=r00*r00;
IkReal x876=r11*r11;
IkReal x877=r02*r02;
IkReal x878=(cj5*sj5);
IkReal x879=((2.0)*r11);
IkReal x880=(r00*sj0);
IkReal x881=(cj5*sj3);
IkReal x882=(cj0*r12);
IkReal x883=(r02*sj0);
IkReal x884=(sj3*sj5);
IkReal x885=((1.0)*x872);
IkReal x886=(cj0*r01*sj0);
IkReal x887=((2.0)*r00*r01);
IkReal x888=((2.0)*cj0*r10*sj0);
IkReal x889=(x873*x876);
IkReal x890=(x873*x874);
CheckValue<IkReal> x891=IKPowWithIntegerCheck(IKsign(((((-1.0)*x873*x885*(r10*r10)))+((x872*x874))+((x879*x886))+(((-1.0)*x872*x879*x886))+(((-1.0)*x873*x878*x887))+(((-1.0)*x877))+(((-1.0)*x874))+((x873*x877))+(((-1.0)*x889))+((x878*x887))+((r10*x873*x878*x879))+(((-2.0)*r10*x878*x886))+(((-1.0)*x885*x890))+x890+((x872*x889))+(((-1.0)*cj0*x878*x879*x880))+(((-1.0)*x873*(r12*r12)))+(((2.0)*x882*x883))+(((2.0)*cj0*r10*x872*x880))+(((-1.0)*x875*x885))+((x872*x873*x875)))),-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x883))+((sj3*x882)))),IkReal((((x880*x881))+(((-1.0)*cj0*r10*x881))+(((-1.0)*r01*sj0*x884))+((cj0*r11*x884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x891.value)))+(x892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x893=IKsin(j4);
IkReal x894=IKcos(j4);
IkReal x895=((1.0)*cj0);
IkReal x896=((1.0)*sj0);
IkReal x897=(cj0*r12);
IkReal x898=(cj5*x894);
IkReal x899=(sj5*x893);
IkReal x900=(sj5*x894);
IkReal x901=(cj5*x893);
evalcond[0]=(((r01*sj0*x899))+((x894*x897))+(((-1.0)*r11*x895*x899))+(((-1.0)*r02*x894*x896))+((cj0*r10*x901))+(((-1.0)*r00*x896*x901)));
evalcond[1]=((((-1.0)*r10*x895*x898))+sj3+((cj0*r11*x900))+(((-1.0)*r02*x893*x896))+(((-1.0)*r01*x896*x900))+((x893*x897))+((r00*sj0*x898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x902=(cj4*r22);
IkReal x903=((1.0)*cj1);
IkReal x904=(cj5*r21);
IkReal x905=((1.0)*sj1);
IkReal x906=(r20*sj5);
IkReal x907=(r21*sj4*sj5);
IkReal x908=(cj5*r20*sj4);
if( IKabs((((cj1*x907))+(((-1.0)*x903*x908))+(((-1.0)*x902*x903))+(((-1.0)*x904*x905))+(((-1.0)*x905*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x903*x904))+(((-1.0)*x903*x906))+(((-1.0)*x905*x907))+((sj1*x908))+((sj1*x902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x907))+(((-1.0)*x903*x908))+(((-1.0)*x902*x903))+(((-1.0)*x904*x905))+(((-1.0)*x905*x906))))+IKsqr(((((-1.0)*x903*x904))+(((-1.0)*x903*x906))+(((-1.0)*x905*x907))+((sj1*x908))+((sj1*x902))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x907))+(((-1.0)*x903*x908))+(((-1.0)*x902*x903))+(((-1.0)*x904*x905))+(((-1.0)*x905*x906))), ((((-1.0)*x903*x904))+(((-1.0)*x903*x906))+(((-1.0)*x905*x907))+((sj1*x908))+((sj1*x902))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x909=IKcos(j2);
IkReal x910=IKsin(j2);
IkReal x911=(sj0*sj5);
IkReal x912=((1.0)*sj4);
IkReal x913=(cj0*cj5);
IkReal x914=(cj0*sj5);
IkReal x915=(cj5*sj0);
IkReal x916=(sj1*x909);
IkReal x917=(cj1*x909);
IkReal x918=(cj1*x910);
IkReal x919=(sj1*x910);
IkReal x920=((1.0)*x918);
evalcond[0]=((((-1.0)*x917))+(((-1.0)*x919))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*x920))+(((-1.0)*cj5*r20*x912))+(((-1.0)*cj4*r22))+x916);
evalcond[2]=((((-1.0)*x920))+((r10*x911))+((r11*x915))+x916+((r01*x913))+((r00*x914)));
evalcond[3]=((((-0.7)*cj1))+(((0.162)*x917))+(((0.162)*x919))+(((-0.5)*x918))+pz+(((0.5)*x916)));
evalcond[4]=((((0.7)*sj1))+(((0.162)*x918))+(((-0.162)*x916))+(((-1.0)*py*sj0))+(((0.5)*x919))+(((0.5)*x917))+(((-1.0)*cj0*px)));
evalcond[5]=((((-1.0)*r11*x911*x912))+(((-1.0)*r01*x912*x914))+((cj0*cj4*r02))+((r10*sj4*x915))+x919+x917+((r00*sj4*x913))+((cj4*r12*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x921=(cj4*r22);
IkReal x922=((1.0)*cj1);
IkReal x923=(r20*sj1);
IkReal x924=(cj5*sj4);
IkReal x925=(cj5*r21);
IkReal x926=(r21*sj4*sj5);
if( IKabs((((sj5*x923))+((sj1*x925))+(((-1.0)*x921*x922))+((cj1*x926))+(((-1.0)*r20*x922*x924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*sj5))+(((-1.0)*sj1*x926))+((sj1*x921))+((x923*x924))+((cj1*x925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x923))+((sj1*x925))+(((-1.0)*x921*x922))+((cj1*x926))+(((-1.0)*r20*x922*x924))))+IKsqr((((cj1*r20*sj5))+(((-1.0)*sj1*x926))+((sj1*x921))+((x923*x924))+((cj1*x925))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj5*x923))+((sj1*x925))+(((-1.0)*x921*x922))+((cj1*x926))+(((-1.0)*r20*x922*x924))), (((cj1*r20*sj5))+(((-1.0)*sj1*x926))+((sj1*x921))+((x923*x924))+((cj1*x925))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x927=IKcos(j2);
IkReal x928=IKsin(j2);
IkReal x929=(sj0*sj5);
IkReal x930=((1.0)*sj4);
IkReal x931=(cj0*cj5);
IkReal x932=(cj0*sj5);
IkReal x933=(cj5*sj0);
IkReal x934=(cj1*x927);
IkReal x935=(sj1*x928);
IkReal x936=(cj1*x928);
IkReal x937=(sj1*x927);
IkReal x938=(x935+x934);
evalcond[0]=((((-1.0)*cj5*r21))+x938+(((-1.0)*r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*cj5*r20*x930))+(((-1.0)*x936))+(((-1.0)*cj4*r22))+x937);
evalcond[2]=(((r10*x929))+(((-1.0)*x937))+((r11*x933))+((r01*x931))+((r00*x932))+x936);
evalcond[3]=((((-0.7)*cj1))+(((0.5)*x937))+(((-0.162)*x935))+(((-0.162)*x934))+pz+(((-0.5)*x936)));
evalcond[4]=((((0.7)*sj1))+(((0.5)*x934))+(((0.5)*x935))+(((0.162)*x937))+(((-0.162)*x936))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[5]=(((r00*sj4*x931))+(((-1.0)*r11*x929*x930))+((cj0*cj4*r02))+x938+(((-1.0)*r01*x930*x932))+((r10*sj4*x933))+((cj4*r12*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x939=((2.0)*sj1);
IkReal x940=(cj0*px);
IkReal x941=((2.0)*cj1);
IkReal x942=(py*sj0);
if( IKabs(((-1.4)+((x939*x940))+((x939*x942))+((pz*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x941*x942))+(((-1.0)*pz*x939))+((x940*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((x939*x940))+((x939*x942))+((pz*x941))))+IKsqr((((x941*x942))+(((-1.0)*pz*x939))+((x940*x941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((x939*x940))+((x939*x942))+((pz*x941))), (((x941*x942))+(((-1.0)*pz*x939))+((x940*x941))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x943=IKsin(j2);
IkReal x944=IKcos(j2);
IkReal x945=(sj0*sj4);
IkReal x946=((1.0)*sj5);
IkReal x947=((1.0)*cj4);
IkReal x948=((1.0)*sj4);
IkReal x949=(cj5*r20);
IkReal x950=(cj0*sj4);
IkReal x951=(cj5*r10);
IkReal x952=(cj0*cj4);
IkReal x953=(cj4*sj0);
IkReal x954=(sj1*x944);
IkReal x955=(cj1*x944);
IkReal x956=((0.5)*x943);
IkReal x957=(cj0*cj5*r00);
IkReal x958=(sj1*x943);
IkReal x959=((1.0)*cj1*x943);
evalcond[0]=((((-1.0)*cj1*x956))+(((-0.7)*cj1))+(((0.5)*x954))+pz);
evalcond[1]=((((0.7)*sj1))+(((0.5)*x955))+((sj1*x956))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=(((r21*sj4*sj5))+(((-1.0)*x948*x949))+(((-1.0)*r22*x947))+(((-1.0)*x959))+x954);
evalcond[3]=((((-1.0)*x955))+(((-1.0)*x958))+(((-1.0)*cj4*r21*x946))+(((-1.0)*r22*x948))+((cj4*x949)));
evalcond[4]=((((-1.0)*r11*x945*x946))+((cj5*r00*x950))+(((-1.0)*r01*x946*x950))+((r02*x952))+((r12*x953))+((x945*x951))+x958+x955);
evalcond[5]=(((r12*x945))+((r01*sj5*x952))+((r11*sj5*x953))+(((-1.0)*x947*x957))+((r02*x950))+(((-1.0)*sj0*x947*x951))+(((-1.0)*x959))+x954);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x960=((2.0)*sj1);
IkReal x961=(cj0*px);
IkReal x962=((2.0)*cj1);
IkReal x963=(py*sj0);
if( IKabs(((-1.4)+((x960*x963))+((x960*x961))+((pz*x962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*pz*x960))+((x961*x962))+((x962*x963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.4)+((x960*x963))+((x960*x961))+((pz*x962))))+IKsqr(((((-1.0)*pz*x960))+((x961*x962))+((x962*x963))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.4)+((x960*x963))+((x960*x961))+((pz*x962))), ((((-1.0)*pz*x960))+((x961*x962))+((x962*x963))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x964=IKcos(j2);
IkReal x965=IKsin(j2);
IkReal x966=(sj0*sj4);
IkReal x967=((1.0)*sj5);
IkReal x968=((1.0)*cj4);
IkReal x969=((1.0)*sj4);
IkReal x970=(cj5*r20);
IkReal x971=(cj0*sj4);
IkReal x972=(cj5*r10);
IkReal x973=(cj0*cj4);
IkReal x974=(cj4*sj0);
IkReal x975=(cj1*x964);
IkReal x976=(sj1*x965);
IkReal x977=(cj1*x965);
IkReal x978=(sj1*x964);
IkReal x979=(cj0*cj5*r00);
IkReal x980=(x975+x976);
evalcond[0]=((((-0.5)*x977))+(((-0.7)*cj1))+(((0.5)*x978))+pz);
evalcond[1]=(((cj4*x970))+(((-1.0)*cj4*r21*x967))+(((-1.0)*r22*x969))+x980);
evalcond[2]=((((0.7)*sj1))+(((0.5)*x976))+(((0.5)*x975))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[3]=(((r21*sj4*sj5))+(((-1.0)*x969*x970))+(((-1.0)*x977))+(((-1.0)*r22*x968))+x978);
evalcond[4]=((((-1.0)*r11*x966*x967))+((cj5*r00*x971))+((x966*x972))+((r12*x974))+((r02*x973))+x980+(((-1.0)*r01*x967*x971)));
evalcond[5]=(((r01*sj5*x973))+(((-1.0)*x978))+((r11*sj5*x974))+(((-1.0)*sj0*x968*x972))+((r12*x966))+((r02*x971))+x977+(((-1.0)*x968*x979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x981=((1.0)*cj1);
IkReal x982=(cj3*sj4);
IkReal x983=(cj5*r20);
IkReal x984=(r21*sj5);
IkReal x985=(r22*sj1);
IkReal x986=(cj3*cj4);
IkReal x987=((1.0)*sj1);
CheckValue<IkReal> x988 = IKatan2WithCheck(IkReal((((cj1*x982*x984))+(((-1.0)*r22*x981*x986))+((cj4*sj1*x983))+(((-1.0)*sj4*x985))+(((-1.0)*cj4*x984*x987))+(((-1.0)*x981*x982*x983)))),IkReal(((((-1.0)*x982*x984*x987))+((sj1*x982*x983))+(((-1.0)*cj4*x981*x984))+((x985*x986))+((cj1*cj4*x983))+(((-1.0)*r22*sj4*x981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x989.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x988.value)+(((1.5707963267949)*(x989.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x990=IKcos(j2);
IkReal x991=IKsin(j2);
IkReal x992=(sj0*sj5);
IkReal x993=((1.0)*cj3);
IkReal x994=((0.162)*sj3);
IkReal x995=((1.0)*sj4);
IkReal x996=(cj5*r20);
IkReal x997=((1.0)*sj5);
IkReal x998=((1.0)*cj4);
IkReal x999=(cj0*r01);
IkReal x1000=(sj0*sj4);
IkReal x1001=((1.0)*sj3);
IkReal x1002=(cj5*r10);
IkReal x1003=(cj0*r02);
IkReal x1004=(cj1*x990);
IkReal x1005=(cj1*x991);
IkReal x1006=(sj1*x991);
IkReal x1007=(cj0*cj5*r00);
IkReal x1008=(sj1*x990);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*x1001*x1006))+(((-1.0)*x1001*x1004))+(((-1.0)*r20*x997)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*r22*x998))+(((-1.0)*x1005))+x1008+(((-1.0)*x995*x996)));
evalcond[2]=((((-1.0)*r22*x995))+((cj4*x996))+(((-1.0)*x1004*x993))+(((-1.0)*x1006*x993))+(((-1.0)*cj4*r21*x997)));
evalcond[3]=(((cj5*r11*sj0))+((cj5*x999))+((sj3*x1008))+((cj0*r00*sj5))+((r10*x992))+(((-1.0)*x1001*x1005)));
evalcond[4]=((((-0.5)*x1005))+(((-0.7)*cj1))+pz+((x1004*x994))+(((0.5)*x1008))+((x1006*x994)));
evalcond[5]=((((0.7)*sj1))+(((-1.0)*py*sj0))+((x1005*x994))+(((0.5)*x1004))+(((0.5)*x1006))+(((-1.0)*cj0*px))+(((-1.0)*x1008*x994)));
evalcond[6]=(((sj4*x1007))+(((-1.0)*r11*x992*x995))+x1006+x1004+(((-1.0)*sj5*x995*x999))+((x1000*x1002))+((cj4*x1003))+((cj4*r12*sj0)));
evalcond[7]=(((sj4*x1003))+((cj3*x1008))+((cj4*sj5*x999))+((cj4*r11*x992))+(((-1.0)*x1007*x998))+(((-1.0)*x1005*x993))+((r12*x1000))+(((-1.0)*sj0*x1002*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1009=((1.0)*r20);
IkReal x1010=(sj1*sj5);
IkReal x1011=(cj1*cj5);
IkReal x1012=((1.0)*r21);
IkReal x1013=(sj3*sj4);
IkReal x1014=(cj5*sj1);
IkReal x1015=(cj1*sj5);
IkReal x1016=(cj4*r22*sj3);
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1017.valid){
continue;
}
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(((((-1.0)*x1012*x1014))+(((-1.0)*x1009*x1010))+(((-1.0)*x1009*x1011*x1013))+(((-1.0)*cj1*x1016))+((r21*x1013*x1015)))),IkReal(((((-1.0)*x1011*x1012))+(((-1.0)*x1009*x1015))+((sj1*x1016))+(((-1.0)*x1010*x1012*x1013))+((r20*x1013*x1014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1017.value)))+(x1018.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1019=IKcos(j2);
IkReal x1020=IKsin(j2);
IkReal x1021=(sj0*sj5);
IkReal x1022=((1.0)*cj3);
IkReal x1023=((0.162)*sj3);
IkReal x1024=((1.0)*sj4);
IkReal x1025=(cj5*r20);
IkReal x1026=((1.0)*sj5);
IkReal x1027=((1.0)*cj4);
IkReal x1028=(cj0*r01);
IkReal x1029=(sj0*sj4);
IkReal x1030=((1.0)*sj3);
IkReal x1031=(cj5*r10);
IkReal x1032=(cj0*r02);
IkReal x1033=(cj1*x1019);
IkReal x1034=(cj1*x1020);
IkReal x1035=(sj1*x1020);
IkReal x1036=(cj0*cj5*r00);
IkReal x1037=(sj1*x1019);
evalcond[0]=((((-1.0)*r20*x1026))+(((-1.0)*x1030*x1033))+(((-1.0)*x1030*x1035))+(((-1.0)*cj5*r21)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*r22*x1027))+x1037+(((-1.0)*x1034))+(((-1.0)*x1024*x1025)));
evalcond[2]=((((-1.0)*r22*x1024))+(((-1.0)*cj4*r21*x1026))+(((-1.0)*x1022*x1035))+(((-1.0)*x1022*x1033))+((cj4*x1025)));
evalcond[3]=(((cj5*r11*sj0))+((cj5*x1028))+((sj3*x1037))+((cj0*r00*sj5))+(((-1.0)*x1030*x1034))+((r10*x1021)));
evalcond[4]=((((-0.5)*x1034))+(((-0.7)*cj1))+pz+((x1023*x1035))+((x1023*x1033))+(((0.5)*x1037)));
evalcond[5]=((((0.7)*sj1))+(((-1.0)*x1023*x1037))+((x1023*x1034))+(((-1.0)*py*sj0))+(((0.5)*x1033))+(((0.5)*x1035))+(((-1.0)*cj0*px)));
evalcond[6]=((((-1.0)*sj5*x1024*x1028))+(((-1.0)*r11*x1021*x1024))+((sj4*x1036))+x1033+x1035+((cj4*x1032))+((x1029*x1031))+((cj4*r12*sj0)));
evalcond[7]=((((-1.0)*x1027*x1036))+(((-1.0)*sj0*x1027*x1031))+((sj4*x1032))+((cj3*x1037))+(((-1.0)*x1022*x1034))+((cj4*sj5*x1028))+((r12*x1029))+((cj4*r11*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1038=((0.162)*sj3);
IkReal x1039=((1.0)*sj1);
IkReal x1040=((0.7)*sj3);
IkReal x1041=(r20*sj5);
IkReal x1042=(cj1*cj5*r21);
IkReal x1043=(py*sj0*sj3);
IkReal x1044=(cj5*r21*sj1);
IkReal x1045=((0.5)*x1041);
IkReal x1046=(cj0*px*sj3);
CheckValue<IkReal> x1047 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj1*x1040))+(((-1.0)*x1038*x1044))+((cj1*x1046))+((cj1*x1045))+((cj1*x1043))+(((-1.0)*sj1*x1038*x1041))+(((0.5)*x1042)))),IkReal(((((-1.0)*cj1*x1038*x1041))+x1040+(((-1.0)*x1038*x1042))+(((-1.0)*x1040*(cj1*cj1)))+(((-0.5)*x1044))+(((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1046))+(((-1.0)*sj1*x1045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(IKsign(((0.162)+(((-0.162)*(cj3*cj3))))),-1);
if(!x1048.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1047.value)+(((1.5707963267949)*(x1048.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1049=IKcos(j2);
IkReal x1050=IKsin(j2);
IkReal x1051=((0.5)*cj1);
IkReal x1052=((0.162)*sj1);
IkReal x1053=((1.0)*cj1);
IkReal x1054=((0.162)*cj1);
IkReal x1055=(sj3*x1050);
IkReal x1056=(sj1*x1049);
IkReal x1057=(sj3*x1049);
evalcond[0]=((((-1.0)*sj1*x1055))+(((-1.0)*cj5*r21))+(((-1.0)*x1053*x1057))+(((-1.0)*r20*sj5)));
evalcond[1]=(((cj0*cj5*r01))+((cj5*r11*sj0))+((sj3*x1056))+((cj0*r00*sj5))+((r10*sj0*sj5))+(((-1.0)*x1053*x1055)));
evalcond[2]=((((0.5)*x1056))+((x1054*x1057))+(((-0.7)*cj1))+((x1052*x1055))+pz+(((-1.0)*x1050*x1051)));
evalcond[3]=((((-1.0)*x1052*x1057))+(((0.7)*sj1))+((x1054*x1055))+(((0.5)*sj1*x1050))+((x1049*x1051))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1058=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1058;
j4eval[1]=IKsign(x1058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1059=cj5*cj5;
IkReal x1060=r21*r21;
IkReal x1061=(x1060+(r22*r22)+(((-1.0)*x1059*x1060))+(((-2.0)*cj5*r20*r21*sj5))+((x1059*(r20*r20))));
j4eval[0]=x1061;
j4eval[1]=IKsign(x1061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1062=cj5*cj5;
IkReal x1063=(cj0*r11);
IkReal x1064=((1.0)*sj0);
IkReal x1065=(cj0*r10);
IkReal x1066=(cj5*r20*sj5);
IkReal x1067=(r21*x1062);
IkReal x1068=(cj5*r21*sj5);
IkReal x1069=(r20*x1062);
IkReal x1070=((((-1.0)*x1065*x1069))+((r00*sj0*x1069))+(((-1.0)*r21*x1063))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r01*x1064*x1066))+(((-1.0)*r01*x1064*x1067))+((x1063*x1066))+((x1063*x1067))+((r02*r22*sj0))+((x1065*x1068))+(((-1.0)*r00*x1064*x1068)));
j4eval[0]=x1070;
j4eval[1]=IKsign(x1070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1071=cj5*cj5;
IkReal x1072=(cj5*r20);
IkReal x1073=((1.0)*sj5);
IkReal x1074=(cj2*sj1);
IkReal x1075=(r21*sj5);
IkReal x1076=(cj5*r10);
IkReal x1077=(cj0*r11);
IkReal x1078=((1.0)*cj0);
IkReal x1079=(r02*sj0);
IkReal x1080=(r01*sj0);
IkReal x1081=((1.0)*x1080);
IkReal x1082=(r21*x1071);
IkReal x1083=(cj0*cj1*sj2);
IkReal x1084=(cj5*r00*sj0);
IkReal x1085=((1.0)*cj1*sj2);
IkReal x1086=(r20*x1071);
CheckValue<IkReal> x1087 = IKatan2WithCheck(IkReal((((x1076*x1083))+((r22*sj3))+((sj5*x1074*x1077))+(((-1.0)*x1073*x1074*x1080))+(((-1.0)*x1084*x1085))+((cj1*sj2*sj5*x1080))+((x1074*x1084))+(((-1.0)*x1074*x1076*x1078))+(((-1.0)*cj1*sj2*x1073*x1077)))),IkReal((((x1074*x1079))+((sj3*x1075))+((r12*x1083))+(((-1.0)*r12*x1074*x1078))+(((-1.0)*sj3*x1072))+(((-1.0)*x1079*x1085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1087.valid){
continue;
}
CheckValue<IkReal> x1088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x1078))+(((-1.0)*r21*x1073*x1084))+((sj5*x1072*x1077))+(((-1.0)*x1072*x1073*x1080))+((r00*sj0*x1086))+(((-1.0)*x1081*x1082))+(((-1.0)*r10*x1078*x1086))+(((-1.0)*r21*x1077))+((cj0*x1075*x1076))+((r22*x1079))+((x1077*x1082))+((r21*x1080)))),-1);
if(!x1088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1087.value)+(((1.5707963267949)*(x1088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1089=IKsin(j4);
IkReal x1090=IKcos(j4);
IkReal x1091=(r11*sj5);
IkReal x1092=(sj1*sj2);
IkReal x1093=(cj5*sj0);
IkReal x1094=(cj1*cj2);
IkReal x1095=((1.0)*cj3);
IkReal x1096=(r21*sj5);
IkReal x1097=(cj1*sj2);
IkReal x1098=(cj5*r00);
IkReal x1099=(r02*sj0);
IkReal x1100=(cj2*sj1);
IkReal x1101=(cj5*r10);
IkReal x1102=(r01*sj5);
IkReal x1103=(cj5*r20);
IkReal x1104=((1.0)*x1090);
IkReal x1105=(cj0*x1089);
IkReal x1106=((1.0)*x1089);
IkReal x1107=(sj0*x1090);
IkReal x1108=(cj0*x1090);
IkReal x1109=(sj0*x1089);
evalcond[0]=((((-1.0)*x1103*x1106))+x1100+((x1089*x1096))+(((-1.0)*r22*x1104))+(((-1.0)*x1097)));
evalcond[1]=((((-1.0)*r22*x1106))+((x1090*x1103))+(((-1.0)*x1094*x1095))+(((-1.0)*x1092*x1095))+(((-1.0)*x1096*x1104)));
evalcond[2]=((((-1.0)*x1091*x1105))+((x1102*x1109))+((x1101*x1105))+(((-1.0)*x1099*x1104))+((r12*x1108))+(((-1.0)*r00*x1093*x1106)));
evalcond[3]=(sj3+(((-1.0)*sj0*x1102*x1104))+((x1091*x1108))+((r00*x1090*x1093))+(((-1.0)*x1099*x1106))+((r12*x1105))+(((-1.0)*cj0*x1101*x1104)));
evalcond[4]=(((r02*x1108))+(((-1.0)*sj0*x1091*x1106))+((r10*x1089*x1093))+((x1098*x1105))+x1094+x1092+(((-1.0)*x1102*x1105))+((r12*x1107)));
evalcond[5]=(((r02*x1105))+((x1102*x1108))+(((-1.0)*r10*x1093*x1104))+((x1091*x1107))+(((-1.0)*x1095*x1097))+((r12*x1109))+((cj3*x1100))+(((-1.0)*cj0*x1098*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1110=cj5*cj5;
IkReal x1111=r21*r21;
IkReal x1112=(cj3*sj1);
IkReal x1113=((1.0)*cj1);
IkReal x1114=(cj2*sj1);
IkReal x1115=(cj5*r20);
IkReal x1116=(cj2*cj3);
IkReal x1117=(r21*sj5);
IkReal x1118=((1.0)*r22*sj2);
IkReal x1119=(sj2*x1115);
CheckValue<IkReal> x1120 = IKatan2WithCheck(IkReal((((x1114*x1115))+(((-1.0)*x1112*x1118))+(((-1.0)*x1113*x1119))+(((-1.0)*x1114*x1117))+((cj1*sj2*x1117))+(((-1.0)*r22*x1113*x1116)))),IkReal((((cj1*x1115*x1116))+(((-1.0)*r22*sj2*x1113))+((x1112*x1119))+(((-1.0)*x1113*x1116*x1117))+(((-1.0)*sj2*x1112*x1117))+((r22*x1114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1120.valid){
continue;
}
CheckValue<IkReal> x1121=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1110*x1111))+x1111+(((-2.0)*x1115*x1117))+(r22*r22)+((x1110*(r20*r20))))),-1);
if(!x1121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1120.value)+(((1.5707963267949)*(x1121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1122=IKsin(j4);
IkReal x1123=IKcos(j4);
IkReal x1124=(r11*sj5);
IkReal x1125=(sj1*sj2);
IkReal x1126=(cj5*sj0);
IkReal x1127=(cj1*cj2);
IkReal x1128=((1.0)*cj3);
IkReal x1129=(r21*sj5);
IkReal x1130=(cj1*sj2);
IkReal x1131=(cj5*r00);
IkReal x1132=(r02*sj0);
IkReal x1133=(cj2*sj1);
IkReal x1134=(cj5*r10);
IkReal x1135=(r01*sj5);
IkReal x1136=(cj5*r20);
IkReal x1137=((1.0)*x1123);
IkReal x1138=(cj0*x1122);
IkReal x1139=((1.0)*x1122);
IkReal x1140=(sj0*x1123);
IkReal x1141=(cj0*x1123);
IkReal x1142=(sj0*x1122);
evalcond[0]=(x1133+(((-1.0)*r22*x1137))+(((-1.0)*x1136*x1139))+(((-1.0)*x1130))+((x1122*x1129)));
evalcond[1]=((((-1.0)*x1127*x1128))+(((-1.0)*r22*x1139))+((x1123*x1136))+(((-1.0)*x1125*x1128))+(((-1.0)*x1129*x1137)));
evalcond[2]=((((-1.0)*x1124*x1138))+((x1134*x1138))+(((-1.0)*x1132*x1137))+(((-1.0)*r00*x1126*x1139))+((x1135*x1142))+((r12*x1141)));
evalcond[3]=(sj3+((x1124*x1141))+((r00*x1123*x1126))+(((-1.0)*x1132*x1139))+(((-1.0)*cj0*x1134*x1137))+((r12*x1138))+(((-1.0)*sj0*x1135*x1137)));
evalcond[4]=(x1125+x1127+(((-1.0)*x1135*x1138))+((x1131*x1138))+(((-1.0)*sj0*x1124*x1139))+((r02*x1141))+((r10*x1122*x1126))+((r12*x1140)));
evalcond[5]=((((-1.0)*cj0*x1131*x1137))+((cj3*x1133))+((x1124*x1140))+(((-1.0)*x1128*x1130))+((r02*x1138))+(((-1.0)*r10*x1126*x1137))+((x1135*x1141))+((r12*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1143=(sj0*sj5);
IkReal x1144=(cj0*cj5);
IkReal x1145=(cj5*r00);
IkReal x1146=(cj2*sj1);
IkReal x1147=(cj0*r12);
IkReal x1148=(cj0*sj5);
IkReal x1149=(cj1*sj2);
IkReal x1150=(sj0*x1149);
IkReal x1151=((1.0)*x1149);
CheckValue<IkReal> x1152 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj0*x1146))+((x1146*x1147))+((r02*x1150))+(((-1.0)*x1147*x1151)))),IkReal((((r10*x1144*x1149))+((r01*x1143*x1149))+((sj0*x1145*x1146))+(((-1.0)*r01*x1143*x1146))+(((-1.0)*r10*x1144*x1146))+(((-1.0)*x1145*x1150))+(((-1.0)*r11*x1148*x1151))+((r11*x1146*x1148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r01*x1144))+((r00*x1148))+((r10*x1143)))),-1);
if(!x1153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1152.value)+(((1.5707963267949)*(x1153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1154=IKsin(j4);
IkReal x1155=IKcos(j4);
IkReal x1156=(r11*sj5);
IkReal x1157=(sj1*sj2);
IkReal x1158=(cj5*sj0);
IkReal x1159=(cj1*cj2);
IkReal x1160=((1.0)*cj3);
IkReal x1161=(r21*sj5);
IkReal x1162=(cj1*sj2);
IkReal x1163=(cj5*r00);
IkReal x1164=(r02*sj0);
IkReal x1165=(cj2*sj1);
IkReal x1166=(cj5*r10);
IkReal x1167=(r01*sj5);
IkReal x1168=(cj5*r20);
IkReal x1169=((1.0)*x1155);
IkReal x1170=(cj0*x1154);
IkReal x1171=((1.0)*x1154);
IkReal x1172=(sj0*x1155);
IkReal x1173=(cj0*x1155);
IkReal x1174=(sj0*x1154);
evalcond[0]=(x1165+(((-1.0)*x1168*x1171))+((x1154*x1161))+(((-1.0)*r22*x1169))+(((-1.0)*x1162)));
evalcond[1]=((((-1.0)*x1159*x1160))+((x1155*x1168))+(((-1.0)*r22*x1171))+(((-1.0)*x1157*x1160))+(((-1.0)*x1161*x1169)));
evalcond[2]=(((x1166*x1170))+(((-1.0)*r00*x1158*x1171))+((r12*x1173))+(((-1.0)*x1156*x1170))+((x1167*x1174))+(((-1.0)*x1164*x1169)));
evalcond[3]=(((r00*x1155*x1158))+sj3+(((-1.0)*sj0*x1167*x1169))+((x1156*x1173))+((r12*x1170))+(((-1.0)*cj0*x1166*x1169))+(((-1.0)*x1164*x1171)));
evalcond[4]=(((r02*x1173))+x1159+x1157+((x1163*x1170))+((r12*x1172))+(((-1.0)*sj0*x1156*x1171))+((r10*x1154*x1158))+(((-1.0)*x1167*x1170)));
evalcond[5]=(((r02*x1170))+(((-1.0)*r10*x1158*x1169))+((x1156*x1172))+((r12*x1174))+(((-1.0)*cj0*x1163*x1169))+((cj3*x1165))+((x1167*x1173))+(((-1.0)*x1160*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1175=((1.0)*cj5);
IkReal x1176=(sj0*sj1);
IkReal x1177=(cj0*r01);
IkReal x1178=(cj1*cj5);
IkReal x1179=(r10*sj5);
IkReal x1180=((1.0)*r20*sj5);
IkReal x1181=(cj0*r00*sj5);
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1180))+((x1177*x1178))+((r11*sj0*x1178))+(((-1.0)*r21*sj1*x1175))+((cj1*sj0*x1179))+((cj1*x1181)))),IkReal(((((-1.0)*sj1*x1175*x1177))+(((-1.0)*x1176*x1179))+(((-1.0)*cj1*r21*x1175))+(((-1.0)*cj1*x1180))+(((-1.0)*sj1*x1181))+(((-1.0)*r11*x1175*x1176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1182.value)))+(x1183.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1184=IKcos(j2);
IkReal x1185=IKsin(j2);
IkReal x1186=((0.5)*cj1);
IkReal x1187=((0.162)*sj1);
IkReal x1188=((1.0)*cj1);
IkReal x1189=((0.162)*cj1);
IkReal x1190=(sj3*x1185);
IkReal x1191=(sj1*x1184);
IkReal x1192=(sj3*x1184);
evalcond[0]=((((-1.0)*x1188*x1192))+(((-1.0)*cj5*r21))+(((-1.0)*sj1*x1190))+(((-1.0)*r20*sj5)));
evalcond[1]=(((cj0*cj5*r01))+((cj5*r11*sj0))+(((-1.0)*x1188*x1190))+((cj0*r00*sj5))+((r10*sj0*sj5))+((sj3*x1191)));
evalcond[2]=(((x1187*x1190))+(((-0.7)*cj1))+((x1189*x1192))+pz+(((-1.0)*x1185*x1186))+(((0.5)*x1191)));
evalcond[3]=((((0.7)*sj1))+((x1184*x1186))+(((0.5)*sj1*x1185))+((x1189*x1190))+(((-1.0)*x1187*x1192))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1193=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1193;
j4eval[1]=IKsign(x1193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1194=cj5*cj5;
IkReal x1195=r21*r21;
IkReal x1196=(x1195+(((-1.0)*x1194*x1195))+(r22*r22)+((x1194*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5)));
j4eval[0]=x1196;
j4eval[1]=IKsign(x1196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1197=cj5*cj5;
IkReal x1198=(cj0*r11);
IkReal x1199=((1.0)*sj0);
IkReal x1200=(cj0*r10);
IkReal x1201=(cj5*r20*sj5);
IkReal x1202=(r21*x1197);
IkReal x1203=(cj5*r21*sj5);
IkReal x1204=(r20*x1197);
IkReal x1205=((((-1.0)*x1200*x1204))+((x1200*x1203))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r21*x1198))+(((-1.0)*r01*x1199*x1201))+(((-1.0)*r01*x1199*x1202))+(((-1.0)*r00*x1199*x1203))+((r00*sj0*x1204))+((r02*r22*sj0))+((x1198*x1201))+((x1198*x1202)));
j4eval[0]=x1205;
j4eval[1]=IKsign(x1205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1206=cj5*cj5;
IkReal x1207=(cj5*r20);
IkReal x1208=((1.0)*sj5);
IkReal x1209=(cj2*sj1);
IkReal x1210=(r21*sj5);
IkReal x1211=(cj5*r10);
IkReal x1212=(cj0*r11);
IkReal x1213=((1.0)*cj0);
IkReal x1214=(r02*sj0);
IkReal x1215=(r01*sj0);
IkReal x1216=((1.0)*x1215);
IkReal x1217=(r21*x1206);
IkReal x1218=(cj0*cj1*sj2);
IkReal x1219=(cj5*r00*sj0);
IkReal x1220=((1.0)*cj1*sj2);
IkReal x1221=(r20*x1206);
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal((((cj1*sj2*sj5*x1215))+((r22*sj3))+(((-1.0)*cj1*sj2*x1208*x1212))+((sj5*x1209*x1212))+((x1211*x1218))+((x1209*x1219))+(((-1.0)*x1209*x1211*x1213))+(((-1.0)*x1208*x1209*x1215))+(((-1.0)*x1219*x1220)))),IkReal((((r12*x1218))+(((-1.0)*sj3*x1207))+(((-1.0)*x1214*x1220))+((sj3*x1210))+((x1209*x1214))+(((-1.0)*r12*x1209*x1213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1207*x1208*x1215))+((x1212*x1217))+((r22*x1214))+(((-1.0)*r12*r22*x1213))+(((-1.0)*x1216*x1217))+(((-1.0)*r21*x1208*x1219))+((r00*sj0*x1221))+((cj0*x1210*x1211))+((sj5*x1207*x1212))+((r21*x1215))+(((-1.0)*r21*x1212))+(((-1.0)*r10*x1213*x1221)))),-1);
if(!x1223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1222.value)+(((1.5707963267949)*(x1223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1224=IKsin(j4);
IkReal x1225=IKcos(j4);
IkReal x1226=(r11*sj5);
IkReal x1227=(sj1*sj2);
IkReal x1228=(cj5*sj0);
IkReal x1229=(cj1*cj2);
IkReal x1230=((1.0)*cj3);
IkReal x1231=(r21*sj5);
IkReal x1232=(cj1*sj2);
IkReal x1233=(cj5*r00);
IkReal x1234=(r02*sj0);
IkReal x1235=(cj2*sj1);
IkReal x1236=(cj5*r10);
IkReal x1237=(r01*sj5);
IkReal x1238=(cj5*r20);
IkReal x1239=((1.0)*x1225);
IkReal x1240=(cj0*x1224);
IkReal x1241=((1.0)*x1224);
IkReal x1242=(sj0*x1225);
IkReal x1243=(cj0*x1225);
IkReal x1244=(sj0*x1224);
evalcond[0]=((((-1.0)*x1232))+x1235+((x1224*x1231))+(((-1.0)*x1238*x1241))+(((-1.0)*r22*x1239)));
evalcond[1]=(((x1225*x1238))+(((-1.0)*x1227*x1230))+(((-1.0)*r22*x1241))+(((-1.0)*x1229*x1230))+(((-1.0)*x1231*x1239)));
evalcond[2]=((((-1.0)*r00*x1228*x1241))+((x1236*x1240))+(((-1.0)*x1226*x1240))+((r12*x1243))+(((-1.0)*x1234*x1239))+((x1237*x1244)));
evalcond[3]=(sj3+(((-1.0)*sj0*x1237*x1239))+((r00*x1225*x1228))+((x1226*x1243))+(((-1.0)*cj0*x1236*x1239))+((r12*x1240))+(((-1.0)*x1234*x1241)));
evalcond[4]=(x1227+x1229+((r10*x1224*x1228))+((x1233*x1240))+((r02*x1243))+((r12*x1242))+(((-1.0)*x1237*x1240))+(((-1.0)*sj0*x1226*x1241)));
evalcond[5]=(((cj3*x1235))+(((-1.0)*x1230*x1232))+(((-1.0)*r10*x1228*x1239))+((x1226*x1242))+((r02*x1240))+(((-1.0)*cj0*x1233*x1239))+((r12*x1244))+((x1237*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1245=cj5*cj5;
IkReal x1246=r21*r21;
IkReal x1247=(cj3*sj1);
IkReal x1248=((1.0)*cj1);
IkReal x1249=(cj2*sj1);
IkReal x1250=(cj5*r20);
IkReal x1251=(cj2*cj3);
IkReal x1252=(r21*sj5);
IkReal x1253=((1.0)*r22*sj2);
IkReal x1254=(sj2*x1250);
CheckValue<IkReal> x1255 = IKatan2WithCheck(IkReal((((cj1*sj2*x1252))+(((-1.0)*r22*x1248*x1251))+(((-1.0)*x1248*x1254))+(((-1.0)*x1247*x1253))+(((-1.0)*x1249*x1252))+((x1249*x1250)))),IkReal((((x1247*x1254))+((cj1*x1250*x1251))+(((-1.0)*sj2*x1247*x1252))+(((-1.0)*r22*sj2*x1248))+((r22*x1249))+(((-1.0)*x1248*x1251*x1252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1255.valid){
continue;
}
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1245*x1246))+x1246+(r22*r22)+((x1245*(r20*r20)))+(((-2.0)*x1250*x1252)))),-1);
if(!x1256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1255.value)+(((1.5707963267949)*(x1256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1257=IKsin(j4);
IkReal x1258=IKcos(j4);
IkReal x1259=(r11*sj5);
IkReal x1260=(sj1*sj2);
IkReal x1261=(cj5*sj0);
IkReal x1262=(cj1*cj2);
IkReal x1263=((1.0)*cj3);
IkReal x1264=(r21*sj5);
IkReal x1265=(cj1*sj2);
IkReal x1266=(cj5*r00);
IkReal x1267=(r02*sj0);
IkReal x1268=(cj2*sj1);
IkReal x1269=(cj5*r10);
IkReal x1270=(r01*sj5);
IkReal x1271=(cj5*r20);
IkReal x1272=((1.0)*x1258);
IkReal x1273=(cj0*x1257);
IkReal x1274=((1.0)*x1257);
IkReal x1275=(sj0*x1258);
IkReal x1276=(cj0*x1258);
IkReal x1277=(sj0*x1257);
evalcond[0]=(x1268+(((-1.0)*x1271*x1274))+(((-1.0)*r22*x1272))+((x1257*x1264))+(((-1.0)*x1265)));
evalcond[1]=((((-1.0)*x1260*x1263))+((x1258*x1271))+(((-1.0)*r22*x1274))+(((-1.0)*x1262*x1263))+(((-1.0)*x1264*x1272)));
evalcond[2]=(((x1269*x1273))+((r12*x1276))+(((-1.0)*x1267*x1272))+((x1270*x1277))+(((-1.0)*r00*x1261*x1274))+(((-1.0)*x1259*x1273)));
evalcond[3]=(((r12*x1273))+sj3+(((-1.0)*x1267*x1274))+((x1259*x1276))+(((-1.0)*sj0*x1270*x1272))+(((-1.0)*cj0*x1269*x1272))+((r00*x1258*x1261)));
evalcond[4]=(x1262+x1260+((r12*x1275))+((r10*x1257*x1261))+((r02*x1276))+((x1266*x1273))+(((-1.0)*sj0*x1259*x1274))+(((-1.0)*x1270*x1273)));
evalcond[5]=(((r12*x1277))+((x1259*x1275))+(((-1.0)*x1263*x1265))+((cj3*x1268))+((r02*x1273))+((x1270*x1276))+(((-1.0)*r10*x1261*x1272))+(((-1.0)*cj0*x1266*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1278=(sj0*sj5);
IkReal x1279=(cj0*cj5);
IkReal x1280=(cj5*r00);
IkReal x1281=(cj2*sj1);
IkReal x1282=(cj0*r12);
IkReal x1283=(cj0*sj5);
IkReal x1284=(cj1*sj2);
IkReal x1285=(sj0*x1284);
IkReal x1286=((1.0)*x1284);
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal((((r02*x1285))+(((-1.0)*r02*sj0*x1281))+((x1281*x1282))+(((-1.0)*x1282*x1286)))),IkReal(((((-1.0)*x1280*x1285))+(((-1.0)*r01*x1278*x1281))+((r11*x1281*x1283))+((r01*x1278*x1284))+((r10*x1279*x1284))+(((-1.0)*r11*x1283*x1286))+((sj0*x1280*x1281))+(((-1.0)*r10*x1279*x1281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(IKsign((((r10*x1278))+((cj5*r11*sj0))+((r00*x1283))+((r01*x1279)))),-1);
if(!x1288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1287.value)+(((1.5707963267949)*(x1288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1289=IKsin(j4);
IkReal x1290=IKcos(j4);
IkReal x1291=(r11*sj5);
IkReal x1292=(sj1*sj2);
IkReal x1293=(cj5*sj0);
IkReal x1294=(cj1*cj2);
IkReal x1295=((1.0)*cj3);
IkReal x1296=(r21*sj5);
IkReal x1297=(cj1*sj2);
IkReal x1298=(cj5*r00);
IkReal x1299=(r02*sj0);
IkReal x1300=(cj2*sj1);
IkReal x1301=(cj5*r10);
IkReal x1302=(r01*sj5);
IkReal x1303=(cj5*r20);
IkReal x1304=((1.0)*x1290);
IkReal x1305=(cj0*x1289);
IkReal x1306=((1.0)*x1289);
IkReal x1307=(sj0*x1290);
IkReal x1308=(cj0*x1290);
IkReal x1309=(sj0*x1289);
evalcond[0]=(x1300+(((-1.0)*r22*x1304))+(((-1.0)*x1303*x1306))+(((-1.0)*x1297))+((x1289*x1296)));
evalcond[1]=((((-1.0)*r22*x1306))+((x1290*x1303))+(((-1.0)*x1296*x1304))+(((-1.0)*x1292*x1295))+(((-1.0)*x1294*x1295)));
evalcond[2]=((((-1.0)*x1299*x1304))+((r12*x1308))+((x1302*x1309))+(((-1.0)*x1291*x1305))+((x1301*x1305))+(((-1.0)*r00*x1293*x1306)));
evalcond[3]=(((x1291*x1308))+sj3+(((-1.0)*x1299*x1306))+(((-1.0)*sj0*x1302*x1304))+((r12*x1305))+(((-1.0)*cj0*x1301*x1304))+((r00*x1290*x1293)));
evalcond[4]=((((-1.0)*sj0*x1291*x1306))+x1292+x1294+((r12*x1307))+((r10*x1289*x1293))+((r02*x1308))+((x1298*x1305))+(((-1.0)*x1302*x1305)));
evalcond[5]=(((x1291*x1307))+((r12*x1309))+(((-1.0)*r10*x1293*x1304))+(((-1.0)*x1295*x1297))+((x1302*x1308))+(((-1.0)*cj0*x1298*x1304))+((cj3*x1300))+((r02*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f6e7ab128cc0fb10dfc0470f033677c0"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
